//
// Generated by Bluespec Compiler, version 2011.04.C (build 23804, 2011-04-18)
//
// On Wed Aug  3 12:04:10 EDT 2011
//
// Method conflict info:
// Method: read_0_req_write
// Conflict-free: read_0_resp__read,
// 	       read_1_req_write,
// 	       read_1_resp__read,
// 	       write_write
// Conflicts: read_0_req_write
//
// Method: read_0_resp__read
// Conflict-free: read_0_req_write,
// 	       read_0_resp__read,
// 	       read_1_req_write,
// 	       read_1_resp__read,
// 	       write_write
//
// Method: read_1_req_write
// Conflict-free: read_0_req_write,
// 	       read_0_resp__read,
// 	       read_1_resp__read,
// 	       write_write
// Conflicts: read_1_req_write
//
// Method: read_1_resp__read
// Conflict-free: read_0_req_write,
// 	       read_0_resp__read,
// 	       read_1_req_write,
// 	       read_1_resp__read,
// 	       write_write
//
// Method: write_write
// Conflict-free: read_0_req_write,
// 	       read_0_resp__read,
// 	       read_1_req_write,
// 	       read_1_resp__read
// Conflicts: write_write
//
//
// Ports:
// Name                         I/O  size props
// read_0_resp_READ               O    32
// read_1_resp_READ               O    32
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_0_req_WRITE               I     5
// read_1_req_WRITE               I     5
// write_WRITE                    I    37
// read_0_req_EN_WRITE            I     1
// read_1_req_EN_WRITE            I     1
// write_EN_WRITE                 I     1
//
// Combinational paths from inputs to outputs:
//   (read_0_req_WRITE,
//    write_WRITE,
//    read_0_req_EN_WRITE,
//    write_EN_WRITE) -> read_0_resp_READ
//   (read_1_req_WRITE,
//    write_WRITE,
//    read_1_req_EN_WRITE,
//    write_EN_WRITE) -> read_1_resp_READ
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkRegisters(CLK,
		   RST_N,

		   read_0_req_WRITE,
		   read_0_req_EN_WRITE,

		   read_0_resp_READ,

		   read_1_req_WRITE,
		   read_1_req_EN_WRITE,

		   read_1_resp_READ,

		   write_WRITE,
		   write_EN_WRITE);
  input  CLK;
  input  RST_N;

  // action method read_0_req_write
  input  [4 : 0] read_0_req_WRITE;
  input  read_0_req_EN_WRITE;

  // value method read_0_resp__read
  output [31 : 0] read_0_resp_READ;

  // action method read_1_req_write
  input  [4 : 0] read_1_req_WRITE;
  input  read_1_req_EN_WRITE;

  // value method read_1_resp__read
  output [31 : 0] read_1_resp_READ;

  // action method write_write
  input  [36 : 0] write_WRITE;
  input  write_EN_WRITE;

  // signals for module outputs
  wire [31 : 0] read_0_resp_READ, read_1_resp_READ;

  // ports of submodule mod__read___req__1_data_
  wire [4 : 0] mod__read___req__1_data_$IN_WRITE,
	       mod__read___req__1_data_$OUT_READ;
  wire mod__read___req__1_data_$IN_EN_WRITE;

  // ports of submodule mod__read___req__1_en_
  wire mod__read___req__1_en_$IN_EN_WRITE;

  // ports of submodule mod__read___req__data_
  wire [4 : 0] mod__read___req__data_$IN_WRITE,
	       mod__read___req__data_$OUT_READ;
  wire mod__read___req__data_$IN_EN_WRITE;

  // ports of submodule mod__read___req__en_
  wire mod__read___req__en_$IN_EN_WRITE;

  // ports of submodule mod__read___resp___1_data_
  wire [31 : 0] mod__read___resp___1_data_$IN_WRITE,
		mod__read___resp___1_data_$OUT_READ;
  wire mod__read___resp___1_data_$IN_EN_WRITE;

  // ports of submodule mod__read___resp___data_
  wire [31 : 0] mod__read___resp___data_$IN_WRITE,
		mod__read___resp___data_$OUT_READ;
  wire mod__read___resp___data_$IN_EN_WRITE;

  // ports of submodule mod__write___data_
  wire [36 : 0] mod__write___data_$IN_WRITE, mod__write___data_$OUT_READ;
  wire mod__write___data_$IN_EN_WRITE;

  // ports of submodule mod__write___en_
  wire mod__write___en_$IN_EN_WRITE, mod__write___en_$OUT_READ;

  // ports of submodule regs_mod__mod__read___req__1_data_
  wire [4 : 0] regs_mod__mod__read___req__1_data_$IN_WRITE,
	       regs_mod__mod__read___req__1_data_$OUT_READ;
  wire regs_mod__mod__read___req__1_data_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__read___req__1_en_
  wire regs_mod__mod__read___req__1_en_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__read___req__data_
  wire [4 : 0] regs_mod__mod__read___req__data_$IN_WRITE,
	       regs_mod__mod__read___req__data_$OUT_READ;
  wire regs_mod__mod__read___req__data_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__read___req__en_
  wire regs_mod__mod__read___req__en_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__read___resp___1_data_
  wire [31 : 0] regs_mod__mod__read___resp___1_data_$IN_WRITE,
		regs_mod__mod__read___resp___1_data_$OUT_READ;
  wire regs_mod__mod__read___resp___1_data_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__read___resp___data_
  wire [31 : 0] regs_mod__mod__read___resp___data_$IN_WRITE,
		regs_mod__mod__read___resp___data_$OUT_READ;
  wire regs_mod__mod__read___resp___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__write___data_
  wire [36 : 0] regs_mod__mod__write___data_$IN_WRITE,
		regs_mod__mod__write___data_$OUT_READ;
  wire regs_mod__mod__write___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__write___en_
  wire regs_mod__mod__write___en_$IN_EN_WRITE,
       regs_mod__mod__write___en_$OUT_READ;

  // ports of submodule regs_mod__rf_mod__1_read___req__data_
  wire [4 : 0] regs_mod__rf_mod__1_read___req__data_$IN_WRITE,
	       regs_mod__rf_mod__1_read___req__data_$OUT_READ;
  wire regs_mod__rf_mod__1_read___req__data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__1_read___req__en_
  wire regs_mod__rf_mod__1_read___req__en_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__1_read___resp___data_
  wire [31 : 0] regs_mod__rf_mod__1_read___resp___data_$IN_WRITE,
		regs_mod__rf_mod__1_read___resp___data_$OUT_READ;
  wire regs_mod__rf_mod__1_read___resp___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__1_write___data_
  wire [36 : 0] regs_mod__rf_mod__1_write___data_$IN_WRITE,
		regs_mod__rf_mod__1_write___data_$OUT_READ;
  wire regs_mod__rf_mod__1_write___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__1_write___en_
  wire regs_mod__rf_mod__1_write___en_$IN_EN_WRITE,
       regs_mod__rf_mod__1_write___en_$OUT_READ;

  // ports of submodule regs_mod__rf_mod__read___req__data_
  wire [4 : 0] regs_mod__rf_mod__read___req__data_$IN_WRITE,
	       regs_mod__rf_mod__read___req__data_$OUT_READ;
  wire regs_mod__rf_mod__read___req__data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__read___req__en_
  wire regs_mod__rf_mod__read___req__en_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__read___resp___data_
  wire [31 : 0] regs_mod__rf_mod__read___resp___data_$IN_WRITE,
		regs_mod__rf_mod__read___resp___data_$OUT_READ;
  wire regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__write___data_
  wire [36 : 0] regs_mod__rf_mod__write___data_$IN_WRITE,
		regs_mod__rf_mod__write___data_$OUT_READ;
  wire regs_mod__rf_mod__write___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__write___en_
  wire regs_mod__rf_mod__write___en_$IN_EN_WRITE,
       regs_mod__rf_mod__write___en_$OUT_READ;

  // ports of submodule regs_mod__rf_rf
  wire [31 : 0] regs_mod__rf_rf$READ_RESP_READ,
		regs_mod__rf_rf$WRITE_DATA_WRITE;
  wire [4 : 0] regs_mod__rf_rf$READ_REQ_WRITE,
	       regs_mod__rf_rf$WRITE_INDEX_WRITE;
  wire regs_mod__rf_rf$WRITE_EN_WRITE;

  // ports of submodule regs_mod__rf_rf_1
  wire [31 : 0] regs_mod__rf_rf_1$READ_RESP_READ,
		regs_mod__rf_rf_1$WRITE_DATA_WRITE;
  wire [4 : 0] regs_mod__rf_rf_1$READ_REQ_WRITE,
	       regs_mod__rf_rf_1$WRITE_INDEX_WRITE;
  wire regs_mod__rf_rf_1$WRITE_EN_WRITE;

  // ports of submodule regs_mod__whichReg
  wire regs_mod__whichReg$IN_EN_WRITE;

  // remaining internal signals
  wire [31 : 0] IF_mod__write___en___read__1_AND_mod__write____ETC___d28,
		IF_mod__write___en___read__1_AND_mod__write____ETC___d35;

  // value method read_0_resp__read
  assign read_0_resp_READ = mod__read___resp___data_$OUT_READ ;

  // value method read_1_resp__read
  assign read_1_resp_READ = mod__read___resp___1_data_$OUT_READ ;

  // submodule mod__read___req__1_data_
  mkWire #( /*width*/ 32'd5) mod__read___req__1_data_(.IN_WRITE(mod__read___req__1_data_$IN_WRITE),
						      .IN_EN_WRITE(mod__read___req__1_data_$IN_EN_WRITE),
						      .OUT_READ(mod__read___req__1_data_$OUT_READ));

  // submodule mod__read___req__1_en_
  mkPulse mod__read___req__1_en_(.IN_EN_WRITE(mod__read___req__1_en_$IN_EN_WRITE),
				 .OUT_READ());

  // submodule mod__read___req__data_
  mkWire #( /*width*/ 32'd5) mod__read___req__data_(.IN_WRITE(mod__read___req__data_$IN_WRITE),
						    .IN_EN_WRITE(mod__read___req__data_$IN_EN_WRITE),
						    .OUT_READ(mod__read___req__data_$OUT_READ));

  // submodule mod__read___req__en_
  mkPulse mod__read___req__en_(.IN_EN_WRITE(mod__read___req__en_$IN_EN_WRITE),
			       .OUT_READ());

  // submodule mod__read___resp___1_data_
  mkWire #( /*width*/ 32'd32) mod__read___resp___1_data_(.IN_WRITE(mod__read___resp___1_data_$IN_WRITE),
							 .IN_EN_WRITE(mod__read___resp___1_data_$IN_EN_WRITE),
							 .OUT_READ(mod__read___resp___1_data_$OUT_READ));

  // submodule mod__read___resp___data_
  mkWire #( /*width*/ 32'd32) mod__read___resp___data_(.IN_WRITE(mod__read___resp___data_$IN_WRITE),
						       .IN_EN_WRITE(mod__read___resp___data_$IN_EN_WRITE),
						       .OUT_READ(mod__read___resp___data_$OUT_READ));

  // submodule mod__write___data_
  mkWire #( /*width*/ 32'd37) mod__write___data_(.IN_WRITE(mod__write___data_$IN_WRITE),
						 .IN_EN_WRITE(mod__write___data_$IN_EN_WRITE),
						 .OUT_READ(mod__write___data_$OUT_READ));

  // submodule mod__write___en_
  mkPulse mod__write___en_(.IN_EN_WRITE(mod__write___en_$IN_EN_WRITE),
			   .OUT_READ(mod__write___en_$OUT_READ));

  // submodule regs_mod__mod__read___req__1_data_
  mkWire #( /*width*/ 32'd5) regs_mod__mod__read___req__1_data_(.IN_WRITE(regs_mod__mod__read___req__1_data_$IN_WRITE),
								.IN_EN_WRITE(regs_mod__mod__read___req__1_data_$IN_EN_WRITE),
								.OUT_READ(regs_mod__mod__read___req__1_data_$OUT_READ));

  // submodule regs_mod__mod__read___req__1_en_
  mkPulse regs_mod__mod__read___req__1_en_(.IN_EN_WRITE(regs_mod__mod__read___req__1_en_$IN_EN_WRITE),
					   .OUT_READ());

  // submodule regs_mod__mod__read___req__data_
  mkWire #( /*width*/ 32'd5) regs_mod__mod__read___req__data_(.IN_WRITE(regs_mod__mod__read___req__data_$IN_WRITE),
							      .IN_EN_WRITE(regs_mod__mod__read___req__data_$IN_EN_WRITE),
							      .OUT_READ(regs_mod__mod__read___req__data_$OUT_READ));

  // submodule regs_mod__mod__read___req__en_
  mkPulse regs_mod__mod__read___req__en_(.IN_EN_WRITE(regs_mod__mod__read___req__en_$IN_EN_WRITE),
					 .OUT_READ());

  // submodule regs_mod__mod__read___resp___1_data_
  mkWire #( /*width*/ 32'd32) regs_mod__mod__read___resp___1_data_(.IN_WRITE(regs_mod__mod__read___resp___1_data_$IN_WRITE),
								   .IN_EN_WRITE(regs_mod__mod__read___resp___1_data_$IN_EN_WRITE),
								   .OUT_READ(regs_mod__mod__read___resp___1_data_$OUT_READ));

  // submodule regs_mod__mod__read___resp___data_
  mkWire #( /*width*/ 32'd32) regs_mod__mod__read___resp___data_(.IN_WRITE(regs_mod__mod__read___resp___data_$IN_WRITE),
								 .IN_EN_WRITE(regs_mod__mod__read___resp___data_$IN_EN_WRITE),
								 .OUT_READ(regs_mod__mod__read___resp___data_$OUT_READ));

  // submodule regs_mod__mod__write___data_
  mkWire #( /*width*/ 32'd37) regs_mod__mod__write___data_(.IN_WRITE(regs_mod__mod__write___data_$IN_WRITE),
							   .IN_EN_WRITE(regs_mod__mod__write___data_$IN_EN_WRITE),
							   .OUT_READ(regs_mod__mod__write___data_$OUT_READ));

  // submodule regs_mod__mod__write___en_
  mkPulse regs_mod__mod__write___en_(.IN_EN_WRITE(regs_mod__mod__write___en_$IN_EN_WRITE),
				     .OUT_READ(regs_mod__mod__write___en_$OUT_READ));

  // submodule regs_mod__rf_mod__1_read___req__data_
  mkWire #( /*width*/ 32'd5) regs_mod__rf_mod__1_read___req__data_(.IN_WRITE(regs_mod__rf_mod__1_read___req__data_$IN_WRITE),
								   .IN_EN_WRITE(regs_mod__rf_mod__1_read___req__data_$IN_EN_WRITE),
								   .OUT_READ(regs_mod__rf_mod__1_read___req__data_$OUT_READ));

  // submodule regs_mod__rf_mod__1_read___req__en_
  mkPulse regs_mod__rf_mod__1_read___req__en_(.IN_EN_WRITE(regs_mod__rf_mod__1_read___req__en_$IN_EN_WRITE),
					      .OUT_READ());

  // submodule regs_mod__rf_mod__1_read___resp___data_
  mkWire #( /*width*/ 32'd32) regs_mod__rf_mod__1_read___resp___data_(.IN_WRITE(regs_mod__rf_mod__1_read___resp___data_$IN_WRITE),
								      .IN_EN_WRITE(regs_mod__rf_mod__1_read___resp___data_$IN_EN_WRITE),
								      .OUT_READ(regs_mod__rf_mod__1_read___resp___data_$OUT_READ));

  // submodule regs_mod__rf_mod__1_write___data_
  mkWire #( /*width*/ 32'd37) regs_mod__rf_mod__1_write___data_(.IN_WRITE(regs_mod__rf_mod__1_write___data_$IN_WRITE),
								.IN_EN_WRITE(regs_mod__rf_mod__1_write___data_$IN_EN_WRITE),
								.OUT_READ(regs_mod__rf_mod__1_write___data_$OUT_READ));

  // submodule regs_mod__rf_mod__1_write___en_
  mkPulse regs_mod__rf_mod__1_write___en_(.IN_EN_WRITE(regs_mod__rf_mod__1_write___en_$IN_EN_WRITE),
					  .OUT_READ(regs_mod__rf_mod__1_write___en_$OUT_READ));

  // submodule regs_mod__rf_mod__read___req__data_
  mkWire #( /*width*/ 32'd5) regs_mod__rf_mod__read___req__data_(.IN_WRITE(regs_mod__rf_mod__read___req__data_$IN_WRITE),
								 .IN_EN_WRITE(regs_mod__rf_mod__read___req__data_$IN_EN_WRITE),
								 .OUT_READ(regs_mod__rf_mod__read___req__data_$OUT_READ));

  // submodule regs_mod__rf_mod__read___req__en_
  mkPulse regs_mod__rf_mod__read___req__en_(.IN_EN_WRITE(regs_mod__rf_mod__read___req__en_$IN_EN_WRITE),
					    .OUT_READ());

  // submodule regs_mod__rf_mod__read___resp___data_
  mkWire #( /*width*/ 32'd32) regs_mod__rf_mod__read___resp___data_(.IN_WRITE(regs_mod__rf_mod__read___resp___data_$IN_WRITE),
								    .IN_EN_WRITE(regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE),
								    .OUT_READ(regs_mod__rf_mod__read___resp___data_$OUT_READ));

  // submodule regs_mod__rf_mod__write___data_
  mkWire #( /*width*/ 32'd37) regs_mod__rf_mod__write___data_(.IN_WRITE(regs_mod__rf_mod__write___data_$IN_WRITE),
							      .IN_EN_WRITE(regs_mod__rf_mod__write___data_$IN_EN_WRITE),
							      .OUT_READ(regs_mod__rf_mod__write___data_$OUT_READ));

  // submodule regs_mod__rf_mod__write___en_
  mkPulse regs_mod__rf_mod__write___en_(.IN_EN_WRITE(regs_mod__rf_mod__write___en_$IN_EN_WRITE),
					.OUT_READ(regs_mod__rf_mod__write___en_$OUT_READ));

  // submodule regs_mod__rf_rf
  mkRegFileLoad_ #( /*width*/ 32'd32,
		    /*n*/ 32'd5,
		    /*size*/ 32'd32,
		    /*file*/ "",
		    /*mode*/ 32'd0) regs_mod__rf_rf(.CLK(CLK),
						    .RST_N(RST_N),
						    .READ_REQ_WRITE(regs_mod__rf_rf$READ_REQ_WRITE),
						    .WRITE_DATA_WRITE(regs_mod__rf_rf$WRITE_DATA_WRITE),
						    .WRITE_INDEX_WRITE(regs_mod__rf_rf$WRITE_INDEX_WRITE),
						    .WRITE_EN_WRITE(regs_mod__rf_rf$WRITE_EN_WRITE),
						    .READ_RESP_READ(regs_mod__rf_rf$READ_RESP_READ));

  // submodule regs_mod__rf_rf_1
  mkRegFileLoad_ #( /*width*/ 32'd32,
		    /*n*/ 32'd5,
		    /*size*/ 32'd32,
		    /*file*/ "",
		    /*mode*/ 32'd0) regs_mod__rf_rf_1(.CLK(CLK),
						      .RST_N(RST_N),
						      .READ_REQ_WRITE(regs_mod__rf_rf_1$READ_REQ_WRITE),
						      .WRITE_DATA_WRITE(regs_mod__rf_rf_1$WRITE_DATA_WRITE),
						      .WRITE_INDEX_WRITE(regs_mod__rf_rf_1$WRITE_INDEX_WRITE),
						      .WRITE_EN_WRITE(regs_mod__rf_rf_1$WRITE_EN_WRITE),
						      .READ_RESP_READ(regs_mod__rf_rf_1$READ_RESP_READ));

  // submodule regs_mod__whichReg
  mkReg #( /*width*/ 32'd1) regs_mod__whichReg(.CLK(CLK),
					       .RST_N(RST_N),
					       .IN_EN_WRITE(regs_mod__whichReg$IN_EN_WRITE));

  // submodule mod__read___req__1_data_
  assign mod__read___req__1_data_$IN_WRITE = read_1_req_WRITE ;
  assign mod__read___req__1_data_$IN_EN_WRITE = read_1_req_EN_WRITE ;

  // submodule mod__read___req__1_en_
  assign mod__read___req__1_en_$IN_EN_WRITE = read_1_req_EN_WRITE ;

  // submodule mod__read___req__data_
  assign mod__read___req__data_$IN_WRITE = read_0_req_WRITE ;
  assign mod__read___req__data_$IN_EN_WRITE = read_0_req_EN_WRITE ;

  // submodule mod__read___req__en_
  assign mod__read___req__en_$IN_EN_WRITE = read_0_req_EN_WRITE ;

  // submodule mod__read___resp___1_data_
  assign mod__read___resp___1_data_$IN_WRITE =
	     (mod__read___req__1_data_$OUT_READ == 5'd0) ?
	       32'd0 :
	       IF_mod__write___en___read__1_AND_mod__write____ETC___d35 ;
  assign mod__read___resp___1_data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__read___resp___data_
  assign mod__read___resp___data_$IN_WRITE =
	     (mod__read___req__data_$OUT_READ == 5'd0) ?
	       32'd0 :
	       IF_mod__write___en___read__1_AND_mod__write____ETC___d28 ;
  assign mod__read___resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__write___data_
  assign mod__write___data_$IN_WRITE = write_WRITE ;
  assign mod__write___data_$IN_EN_WRITE = write_EN_WRITE ;

  // submodule mod__write___en_
  assign mod__write___en_$IN_EN_WRITE = write_EN_WRITE ;

  // submodule regs_mod__mod__read___req__1_data_
  assign regs_mod__mod__read___req__1_data_$IN_WRITE =
	     mod__read___req__1_data_$OUT_READ ;
  assign regs_mod__mod__read___req__1_data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__mod__read___req__1_en_
  assign regs_mod__mod__read___req__1_en_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__mod__read___req__data_
  assign regs_mod__mod__read___req__data_$IN_WRITE =
	     mod__read___req__data_$OUT_READ ;
  assign regs_mod__mod__read___req__data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__mod__read___req__en_
  assign regs_mod__mod__read___req__en_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__mod__read___resp___1_data_
  assign regs_mod__mod__read___resp___1_data_$IN_WRITE =
	     regs_mod__rf_mod__1_read___resp___data_$OUT_READ ;
  assign regs_mod__mod__read___resp___1_data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__mod__read___resp___data_
  assign regs_mod__mod__read___resp___data_$IN_WRITE =
	     regs_mod__rf_mod__read___resp___data_$OUT_READ ;
  assign regs_mod__mod__read___resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__mod__write___data_
  assign regs_mod__mod__write___data_$IN_WRITE = mod__write___data_$OUT_READ ;
  assign regs_mod__mod__write___data_$IN_EN_WRITE =
	     mod__write___en_$OUT_READ &&
	     mod__write___data_$OUT_READ[36:32] != 5'd0 ;

  // submodule regs_mod__mod__write___en_
  assign regs_mod__mod__write___en_$IN_EN_WRITE =
	     mod__write___en_$OUT_READ &&
	     mod__write___data_$OUT_READ[36:32] != 5'd0 ;

  // submodule regs_mod__rf_mod__1_read___req__data_
  assign regs_mod__rf_mod__1_read___req__data_$IN_WRITE =
	     regs_mod__mod__read___req__1_data_$OUT_READ ;
  assign regs_mod__rf_mod__1_read___req__data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__1_read___req__en_
  assign regs_mod__rf_mod__1_read___req__en_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__1_read___resp___data_
  assign regs_mod__rf_mod__1_read___resp___data_$IN_WRITE =
	     regs_mod__rf_rf_1$READ_RESP_READ ;
  assign regs_mod__rf_mod__1_read___resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__1_write___data_
  assign regs_mod__rf_mod__1_write___data_$IN_WRITE =
	     regs_mod__mod__write___data_$OUT_READ ;
  assign regs_mod__rf_mod__1_write___data_$IN_EN_WRITE =
	     regs_mod__mod__write___en_$OUT_READ ;

  // submodule regs_mod__rf_mod__1_write___en_
  assign regs_mod__rf_mod__1_write___en_$IN_EN_WRITE =
	     regs_mod__mod__write___en_$OUT_READ ;

  // submodule regs_mod__rf_mod__read___req__data_
  assign regs_mod__rf_mod__read___req__data_$IN_WRITE =
	     regs_mod__mod__read___req__data_$OUT_READ ;
  assign regs_mod__rf_mod__read___req__data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__read___req__en_
  assign regs_mod__rf_mod__read___req__en_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__read___resp___data_
  assign regs_mod__rf_mod__read___resp___data_$IN_WRITE =
	     regs_mod__rf_rf$READ_RESP_READ ;
  assign regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__write___data_
  assign regs_mod__rf_mod__write___data_$IN_WRITE =
	     regs_mod__mod__write___data_$OUT_READ ;
  assign regs_mod__rf_mod__write___data_$IN_EN_WRITE =
	     regs_mod__mod__write___en_$OUT_READ ;

  // submodule regs_mod__rf_mod__write___en_
  assign regs_mod__rf_mod__write___en_$IN_EN_WRITE =
	     regs_mod__mod__write___en_$OUT_READ ;

  // submodule regs_mod__rf_rf
  assign regs_mod__rf_rf$READ_REQ_WRITE =
	     regs_mod__rf_mod__read___req__data_$OUT_READ ;
  assign regs_mod__rf_rf$WRITE_DATA_WRITE =
	     regs_mod__rf_mod__write___data_$OUT_READ[31:0] ;
  assign regs_mod__rf_rf$WRITE_INDEX_WRITE =
	     regs_mod__rf_mod__write___data_$OUT_READ[36:32] ;
  assign regs_mod__rf_rf$WRITE_EN_WRITE =
	     regs_mod__rf_mod__write___en_$OUT_READ ;

  // submodule regs_mod__rf_rf_1
  assign regs_mod__rf_rf_1$READ_REQ_WRITE =
	     regs_mod__rf_mod__1_read___req__data_$OUT_READ ;
  assign regs_mod__rf_rf_1$WRITE_DATA_WRITE =
	     regs_mod__rf_mod__1_write___data_$OUT_READ[31:0] ;
  assign regs_mod__rf_rf_1$WRITE_INDEX_WRITE =
	     regs_mod__rf_mod__1_write___data_$OUT_READ[36:32] ;
  assign regs_mod__rf_rf_1$WRITE_EN_WRITE =
	     regs_mod__rf_mod__1_write___en_$OUT_READ ;

  // submodule regs_mod__whichReg
  assign regs_mod__whichReg$IN_EN_WRITE = 1'd1 ;

  // remaining internal signals
  assign IF_mod__write___en___read__1_AND_mod__write____ETC___d28 =
	     (mod__write___en_$OUT_READ &&
	      mod__write___data_$OUT_READ[36:32] ==
	      mod__read___req__data_$OUT_READ) ?
	       mod__write___data_$OUT_READ[31:0] :
	       regs_mod__mod__read___resp___data_$OUT_READ ;
  assign IF_mod__write___en___read__1_AND_mod__write____ETC___d35 =
	     (mod__write___en_$OUT_READ &&
	      mod__write___data_$OUT_READ[36:32] ==
	      mod__read___req__1_data_$OUT_READ) ?
	       mod__write___data_$OUT_READ[31:0] :
	       regs_mod__mod__read___resp___1_data_$OUT_READ ;
endmodule  // mkRegisters

