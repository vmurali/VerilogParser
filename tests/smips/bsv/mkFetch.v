//
// Generated by Bluespec Compiler, version 2011.04.C (build 23804, 2011-04-18)
//
// On Wed Aug  3 12:04:07 EDT 2011
//
// Method conflict info:
// Method: currEpoch__read
// Conflict-free: currEpoch__read,
// 	       pcQ_notFull_write,
// 	       pcQ_enq__read,
// 	       pcQ_enq_en,
// 	       instReqQ_notFull_write,
// 	       instReqQ_enq__read,
// 	       instReqQ_enq_en,
// 	       branchPc_write
//
// Method: pcQ_notFull_write
// Conflict-free: currEpoch__read,
// 	       pcQ_enq__read,
// 	       pcQ_enq_en,
// 	       instReqQ_notFull_write,
// 	       instReqQ_enq__read,
// 	       instReqQ_enq_en,
// 	       branchPc_write
// Conflicts: pcQ_notFull_write
//
// Method: pcQ_enq__read
// Conflict-free: currEpoch__read,
// 	       pcQ_notFull_write,
// 	       pcQ_enq__read,
// 	       pcQ_enq_en,
// 	       instReqQ_notFull_write,
// 	       instReqQ_enq__read,
// 	       instReqQ_enq_en,
// 	       branchPc_write
//
// Method: pcQ_enq_en
// Conflict-free: currEpoch__read,
// 	       pcQ_notFull_write,
// 	       pcQ_enq__read,
// 	       pcQ_enq_en,
// 	       instReqQ_notFull_write,
// 	       instReqQ_enq__read,
// 	       instReqQ_enq_en,
// 	       branchPc_write
//
// Method: instReqQ_notFull_write
// Conflict-free: currEpoch__read,
// 	       pcQ_notFull_write,
// 	       pcQ_enq__read,
// 	       pcQ_enq_en,
// 	       instReqQ_enq__read,
// 	       instReqQ_enq_en,
// 	       branchPc_write
// Conflicts: instReqQ_notFull_write
//
// Method: instReqQ_enq__read
// Conflict-free: currEpoch__read,
// 	       pcQ_notFull_write,
// 	       pcQ_enq__read,
// 	       pcQ_enq_en,
// 	       instReqQ_notFull_write,
// 	       instReqQ_enq__read,
// 	       instReqQ_enq_en,
// 	       branchPc_write
//
// Method: instReqQ_enq_en
// Conflict-free: currEpoch__read,
// 	       pcQ_notFull_write,
// 	       pcQ_enq__read,
// 	       pcQ_enq_en,
// 	       instReqQ_notFull_write,
// 	       instReqQ_enq__read,
// 	       instReqQ_enq_en,
// 	       branchPc_write
//
// Method: branchPc_write
// Conflict-free: currEpoch__read,
// 	       pcQ_notFull_write,
// 	       pcQ_enq__read,
// 	       pcQ_enq_en,
// 	       instReqQ_notFull_write,
// 	       instReqQ_enq__read,
// 	       instReqQ_enq_en
// Conflicts: branchPc_write
//
//
// Ports:
// Name                         I/O  size props
// currEpoch_READ                 O     1
// pcQ_enq_READ                   O    33
// pcQ_enq_EN_READ                O     1
// instReqQ_enq_READ              O    32
// instReqQ_enq_EN_READ           O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// pcQ_notFull_WRITE              I     1
// instReqQ_notFull_WRITE         I     1
// branchPc_WRITE                 I    32
// branchPc_EN_WRITE              I     1
//
// Combinational paths from inputs to outputs:
//   (pcQ_notFull_WRITE, instReqQ_notFull_WRITE) -> pcQ_enq_READ
//   (pcQ_notFull_WRITE, instReqQ_notFull_WRITE) -> instReqQ_enq_READ
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFetch(CLK,
	       RST_N,

	       currEpoch_READ,

	       pcQ_notFull_WRITE,

	       pcQ_enq_READ,

	       pcQ_enq_EN_READ,

	       instReqQ_notFull_WRITE,

	       instReqQ_enq_READ,

	       instReqQ_enq_EN_READ,

	       branchPc_WRITE,
	       branchPc_EN_WRITE);
  input  CLK;
  input  RST_N;

  // value method currEpoch__read
  output currEpoch_READ;

  // action method pcQ_notFull_write
  input  pcQ_notFull_WRITE;

  // value method pcQ_enq__read
  output [32 : 0] pcQ_enq_READ;

  // value method pcQ_enq_en
  output pcQ_enq_EN_READ;

  // action method instReqQ_notFull_write
  input  instReqQ_notFull_WRITE;

  // value method instReqQ_enq__read
  output [31 : 0] instReqQ_enq_READ;

  // value method instReqQ_enq_en
  output instReqQ_enq_EN_READ;

  // action method branchPc_write
  input  [31 : 0] branchPc_WRITE;
  input  branchPc_EN_WRITE;

  // signals for module outputs
  wire [32 : 0] pcQ_enq_READ;
  wire [31 : 0] instReqQ_enq_READ;
  wire currEpoch_READ, instReqQ_enq_EN_READ, pcQ_enq_EN_READ;

  // ports of submodule epoch
  wire epoch$IN_EN_WRITE, epoch$IN_WRITE, epoch$OUT_READ;

  // ports of submodule fired
  wire fired$IN_EN_WRITE, fired$OUT_READ;

  // ports of submodule mod__branchPc___data_
  wire [31 : 0] mod__branchPc___data_$IN_WRITE,
		mod__branchPc___data_$OUT_READ;
  wire mod__branchPc___data_$IN_EN_WRITE;

  // ports of submodule mod__branchPc___en_
  wire mod__branchPc___en_$IN_EN_WRITE, mod__branchPc___en_$OUT_READ;

  // ports of submodule mod__currEpoch__data_
  wire mod__currEpoch__data_$IN_EN_WRITE,
       mod__currEpoch__data_$IN_WRITE,
       mod__currEpoch__data_$OUT_READ;

  // ports of submodule mod__instReqQ__enq__data_
  wire [31 : 0] mod__instReqQ__enq__data_$IN_WRITE,
		mod__instReqQ__enq__data_$OUT_READ;
  wire mod__instReqQ__enq__data_$IN_EN_WRITE;

  // ports of submodule mod__instReqQ__enq__en_
  wire mod__instReqQ__enq__en_$IN_EN_WRITE, mod__instReqQ__enq__en_$OUT_READ;

  // ports of submodule mod__instReqQ__notFull___data_
  wire mod__instReqQ__notFull___data_$IN_EN_WRITE,
       mod__instReqQ__notFull___data_$IN_WRITE,
       mod__instReqQ__notFull___data_$OUT_READ;

  // ports of submodule mod__pcQ__enq__data_
  wire [32 : 0] mod__pcQ__enq__data_$IN_WRITE, mod__pcQ__enq__data_$OUT_READ;
  wire mod__pcQ__enq__data_$IN_EN_WRITE;

  // ports of submodule mod__pcQ__enq__en_
  wire mod__pcQ__enq__en_$IN_EN_WRITE, mod__pcQ__enq__en_$OUT_READ;

  // ports of submodule mod__pcQ__notFull___data_
  wire mod__pcQ__notFull___data_$IN_EN_WRITE,
       mod__pcQ__notFull___data_$IN_WRITE,
       mod__pcQ__notFull___data_$OUT_READ;

  // ports of submodule pc
  wire [31 : 0] pc$IN_WRITE, pc$OUT_READ;
  wire pc$IN_EN_WRITE;

  // remaining internal signals
  wire [31 : 0] x_pc__h656;

  // value method currEpoch__read
  assign currEpoch_READ = mod__currEpoch__data_$OUT_READ ;

  // value method pcQ_enq__read
  assign pcQ_enq_READ = mod__pcQ__enq__data_$OUT_READ ;

  // value method pcQ_enq_en
  assign pcQ_enq_EN_READ = mod__pcQ__enq__en_$OUT_READ ;

  // value method instReqQ_enq__read
  assign instReqQ_enq_READ = mod__instReqQ__enq__data_$OUT_READ ;

  // value method instReqQ_enq_en
  assign instReqQ_enq_EN_READ = mod__instReqQ__enq__en_$OUT_READ ;

  // submodule epoch
  mkRegU #( /*width*/ 32'd1) epoch(.CLK(CLK),
				   .IN_WRITE(epoch$IN_WRITE),
				   .IN_EN_WRITE(epoch$IN_EN_WRITE),
				   .OUT_READ(epoch$OUT_READ));

  // submodule fired
  mkPulse fired(.IN_EN_WRITE(fired$IN_EN_WRITE), .OUT_READ(fired$OUT_READ));

  // submodule mod__branchPc___data_
  mkWire #( /*width*/ 32'd32) mod__branchPc___data_(.IN_WRITE(mod__branchPc___data_$IN_WRITE),
						    .IN_EN_WRITE(mod__branchPc___data_$IN_EN_WRITE),
						    .OUT_READ(mod__branchPc___data_$OUT_READ));

  // submodule mod__branchPc___en_
  mkPulse mod__branchPc___en_(.IN_EN_WRITE(mod__branchPc___en_$IN_EN_WRITE),
			      .OUT_READ(mod__branchPc___en_$OUT_READ));

  // submodule mod__currEpoch__data_
  mkWire #( /*width*/ 32'd1) mod__currEpoch__data_(.IN_WRITE(mod__currEpoch__data_$IN_WRITE),
						   .IN_EN_WRITE(mod__currEpoch__data_$IN_EN_WRITE),
						   .OUT_READ(mod__currEpoch__data_$OUT_READ));

  // submodule mod__instReqQ__enq__data_
  mkWire #( /*width*/ 32'd32) mod__instReqQ__enq__data_(.IN_WRITE(mod__instReqQ__enq__data_$IN_WRITE),
							.IN_EN_WRITE(mod__instReqQ__enq__data_$IN_EN_WRITE),
							.OUT_READ(mod__instReqQ__enq__data_$OUT_READ));

  // submodule mod__instReqQ__enq__en_
  mkPulse mod__instReqQ__enq__en_(.IN_EN_WRITE(mod__instReqQ__enq__en_$IN_EN_WRITE),
				  .OUT_READ(mod__instReqQ__enq__en_$OUT_READ));

  // submodule mod__instReqQ__notFull___data_
  mkWire #( /*width*/ 32'd1) mod__instReqQ__notFull___data_(.IN_WRITE(mod__instReqQ__notFull___data_$IN_WRITE),
							    .IN_EN_WRITE(mod__instReqQ__notFull___data_$IN_EN_WRITE),
							    .OUT_READ(mod__instReqQ__notFull___data_$OUT_READ));

  // submodule mod__pcQ__enq__data_
  mkWire #( /*width*/ 32'd33) mod__pcQ__enq__data_(.IN_WRITE(mod__pcQ__enq__data_$IN_WRITE),
						   .IN_EN_WRITE(mod__pcQ__enq__data_$IN_EN_WRITE),
						   .OUT_READ(mod__pcQ__enq__data_$OUT_READ));

  // submodule mod__pcQ__enq__en_
  mkPulse mod__pcQ__enq__en_(.IN_EN_WRITE(mod__pcQ__enq__en_$IN_EN_WRITE),
			     .OUT_READ(mod__pcQ__enq__en_$OUT_READ));

  // submodule mod__pcQ__notFull___data_
  mkWire #( /*width*/ 32'd1) mod__pcQ__notFull___data_(.IN_WRITE(mod__pcQ__notFull___data_$IN_WRITE),
						       .IN_EN_WRITE(mod__pcQ__notFull___data_$IN_EN_WRITE),
						       .OUT_READ(mod__pcQ__notFull___data_$OUT_READ));

  // submodule pc
  mkReg #( /*width*/ 32'd32,  /*init*/ 32'h00001000) pc(.CLK(CLK),
							.RST_N(RST_N),
							.IN_WRITE(pc$IN_WRITE),
							.IN_EN_WRITE(pc$IN_EN_WRITE),
							.OUT_READ(pc$OUT_READ));

  // submodule epoch
  assign epoch$IN_WRITE = !epoch$OUT_READ ;
  assign epoch$IN_EN_WRITE = mod__branchPc___en_$OUT_READ ;

  // submodule fired
  assign fired$IN_EN_WRITE =
	     mod__instReqQ__notFull___data_$OUT_READ &&
	     mod__pcQ__notFull___data_$OUT_READ ;

  // submodule mod__branchPc___data_
  assign mod__branchPc___data_$IN_WRITE = branchPc_WRITE ;
  assign mod__branchPc___data_$IN_EN_WRITE = branchPc_EN_WRITE ;

  // submodule mod__branchPc___en_
  assign mod__branchPc___en_$IN_EN_WRITE = branchPc_EN_WRITE ;

  // submodule mod__currEpoch__data_
  assign mod__currEpoch__data_$IN_WRITE = epoch$OUT_READ ;
  assign mod__currEpoch__data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__instReqQ__enq__data_
  assign mod__instReqQ__enq__data_$IN_WRITE = pc$OUT_READ ;
  assign mod__instReqQ__enq__data_$IN_EN_WRITE =
	     mod__instReqQ__notFull___data_$OUT_READ &&
	     mod__pcQ__notFull___data_$OUT_READ ;

  // submodule mod__instReqQ__enq__en_
  assign mod__instReqQ__enq__en_$IN_EN_WRITE =
	     mod__instReqQ__notFull___data_$OUT_READ &&
	     mod__pcQ__notFull___data_$OUT_READ ;

  // submodule mod__instReqQ__notFull___data_
  assign mod__instReqQ__notFull___data_$IN_WRITE = instReqQ_notFull_WRITE ;
  assign mod__instReqQ__notFull___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__pcQ__enq__data_
  assign mod__pcQ__enq__data_$IN_WRITE = { x_pc__h656, epoch$OUT_READ } ;
  assign mod__pcQ__enq__data_$IN_EN_WRITE =
	     mod__instReqQ__notFull___data_$OUT_READ &&
	     mod__pcQ__notFull___data_$OUT_READ ;

  // submodule mod__pcQ__enq__en_
  assign mod__pcQ__enq__en_$IN_EN_WRITE =
	     mod__instReqQ__notFull___data_$OUT_READ &&
	     mod__pcQ__notFull___data_$OUT_READ ;

  // submodule mod__pcQ__notFull___data_
  assign mod__pcQ__notFull___data_$IN_WRITE = pcQ_notFull_WRITE ;
  assign mod__pcQ__notFull___data_$IN_EN_WRITE = 1'd1 ;

  // submodule pc
  assign pc$IN_WRITE =
	     mod__branchPc___en_$OUT_READ ?
	       mod__branchPc___data_$OUT_READ :
	       x_pc__h656 ;
  assign pc$IN_EN_WRITE = mod__branchPc___en_$OUT_READ || fired$OUT_READ ;

  // remaining internal signals
  assign x_pc__h656 = pc$OUT_READ + 32'd4 ;
endmodule  // mkFetch

