//
// Generated by Bluespec Compiler, version 2011.04.C (build 23804, 2011-04-18)
//
// On Wed Aug  3 12:04:16 EDT 2011
//
// Method conflict info:
// Method: pcQ_notEmpty_write
// Conflict-free: pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
// Conflicts: pcQ_notEmpty_write
//
// Method: pcQ_first_write
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
// Conflicts: pcQ_first_write
//
// Method: pcQ_deq__read
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: instQ_notEmpty_write
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
// Conflicts: instQ_notEmpty_write
//
// Method: instQ_first_write
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
// Conflicts: instQ_first_write
//
// Method: instQ_deq__read
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: dataReqQ_notFull_write
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
// Conflicts: dataReqQ_notFull_write
//
// Method: dataReqQ_enq__read
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: dataReqQ_enq_en
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: regRead_0_req__read
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: regRead_0_req_en
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: regRead_0_resp_write
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
// Conflicts: regRead_0_resp_write
//
// Method: regRead_1_req__read
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: regRead_1_req_en
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: regRead_1_resp_write
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
// Conflicts: regRead_1_resp_write
//
// Method: wbQ_notFull_write
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
// Conflicts: wbQ_notFull_write
//
// Method: wbQ_enq__read
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: wbQ_enq_en
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: wbIndex_write
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
// Conflicts: wbIndex_write
//
// Method: currEpoch_write
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
// Conflicts: currEpoch_write
//
// Method: branchPc__read
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: branchPc_en
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: cop_write__read
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: cop_write_en
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en,
// 	       cop_read_write
//
// Method: cop_read_write
// Conflict-free: pcQ_notEmpty_write,
// 	       pcQ_first_write,
// 	       pcQ_deq__read,
// 	       instQ_notEmpty_write,
// 	       instQ_first_write,
// 	       instQ_deq__read,
// 	       dataReqQ_notFull_write,
// 	       dataReqQ_enq__read,
// 	       dataReqQ_enq_en,
// 	       regRead_0_req__read,
// 	       regRead_0_req_en,
// 	       regRead_0_resp_write,
// 	       regRead_1_req__read,
// 	       regRead_1_req_en,
// 	       regRead_1_resp_write,
// 	       wbQ_notFull_write,
// 	       wbQ_enq__read,
// 	       wbQ_enq_en,
// 	       wbIndex_write,
// 	       currEpoch_write,
// 	       branchPc__read,
// 	       branchPc_en,
// 	       cop_write__read,
// 	       cop_write_en
// Conflicts: cop_read_write
//
//
// Ports:
// Name                         I/O  size props
// pcQ_deq_READ                   O     1
// instQ_deq_READ                 O     1
// dataReqQ_enq_READ              O    65
// dataReqQ_enq_EN_READ           O     1
// regRead_0_req_READ             O     5
// regRead_0_req_EN_READ          O     1
// regRead_1_req_READ             O     5
// regRead_1_req_EN_READ          O     1
// wbQ_enq_READ                   O    38
// wbQ_enq_EN_READ                O     1
// branchPc_READ                  O    32
// branchPc_EN_READ               O     1
// cop_write_READ                 O    37
// cop_write_EN_READ              O     1
// CLK                            I     1 unused
// RST_N                          I     1 unused
// pcQ_notEmpty_WRITE             I     1
// pcQ_first_WRITE                I    33
// instQ_notEmpty_WRITE           I     1
// instQ_first_WRITE              I    32
// dataReqQ_notFull_WRITE         I     1
// regRead_0_resp_WRITE           I    32
// regRead_1_resp_WRITE           I    32
// wbQ_notFull_WRITE              I     1
// wbIndex_WRITE                  I     5
// currEpoch_WRITE                I     1
// cop_read_WRITE                 I    32
// wbIndex_EN_WRITE               I     1
//
// Combinational paths from inputs to outputs:
//   (pcQ_notEmpty_WRITE,
//    pcQ_first_WRITE,
//    instQ_notEmpty_WRITE,
//    instQ_first_WRITE,
//    dataReqQ_notFull_WRITE,
//    regRead_0_resp_WRITE,
//    regRead_1_resp_WRITE,
//    wbQ_notFull_WRITE,
//    wbIndex_WRITE,
//    currEpoch_WRITE,
//    wbIndex_EN_WRITE) -> dataReqQ_enq_READ
//   (pcQ_notEmpty_WRITE,
//    pcQ_first_WRITE,
//    instQ_notEmpty_WRITE,
//    instQ_first_WRITE,
//    dataReqQ_notFull_WRITE,
//    regRead_0_resp_WRITE,
//    regRead_1_resp_WRITE,
//    wbQ_notFull_WRITE,
//    wbIndex_WRITE,
//    currEpoch_WRITE,
//    cop_read_WRITE,
//    wbIndex_EN_WRITE) -> wbQ_enq_READ
//   (pcQ_notEmpty_WRITE,
//    pcQ_first_WRITE,
//    instQ_notEmpty_WRITE,
//    instQ_first_WRITE,
//    dataReqQ_notFull_WRITE,
//    regRead_0_resp_WRITE,
//    regRead_1_resp_WRITE,
//    wbQ_notFull_WRITE,
//    wbIndex_WRITE,
//    currEpoch_WRITE,
//    wbIndex_EN_WRITE) -> branchPc_READ
//   (pcQ_notEmpty_WRITE,
//    pcQ_first_WRITE,
//    instQ_notEmpty_WRITE,
//    instQ_first_WRITE,
//    dataReqQ_notFull_WRITE,
//    regRead_1_resp_WRITE,
//    wbQ_notFull_WRITE,
//    wbIndex_WRITE,
//    currEpoch_WRITE,
//    wbIndex_EN_WRITE) -> cop_write_READ
//   (instQ_notEmpty_WRITE, instQ_first_WRITE) -> regRead_0_req_READ
//   (instQ_notEmpty_WRITE, instQ_first_WRITE) -> regRead_1_req_READ
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkExecute(CLK,
		 RST_N,

		 pcQ_notEmpty_WRITE,

		 pcQ_first_WRITE,

		 pcQ_deq_READ,

		 instQ_notEmpty_WRITE,

		 instQ_first_WRITE,

		 instQ_deq_READ,

		 dataReqQ_notFull_WRITE,

		 dataReqQ_enq_READ,

		 dataReqQ_enq_EN_READ,

		 regRead_0_req_READ,

		 regRead_0_req_EN_READ,

		 regRead_0_resp_WRITE,

		 regRead_1_req_READ,

		 regRead_1_req_EN_READ,

		 regRead_1_resp_WRITE,

		 wbQ_notFull_WRITE,

		 wbQ_enq_READ,

		 wbQ_enq_EN_READ,

		 wbIndex_WRITE,
		 wbIndex_EN_WRITE,

		 currEpoch_WRITE,

		 branchPc_READ,

		 branchPc_EN_READ,

		 cop_write_READ,

		 cop_write_EN_READ,

		 cop_read_WRITE);
  input  CLK;
  input  RST_N;

  // action method pcQ_notEmpty_write
  input  pcQ_notEmpty_WRITE;

  // action method pcQ_first_write
  input  [32 : 0] pcQ_first_WRITE;

  // value method pcQ_deq__read
  output pcQ_deq_READ;

  // action method instQ_notEmpty_write
  input  instQ_notEmpty_WRITE;

  // action method instQ_first_write
  input  [31 : 0] instQ_first_WRITE;

  // value method instQ_deq__read
  output instQ_deq_READ;

  // action method dataReqQ_notFull_write
  input  dataReqQ_notFull_WRITE;

  // value method dataReqQ_enq__read
  output [64 : 0] dataReqQ_enq_READ;

  // value method dataReqQ_enq_en
  output dataReqQ_enq_EN_READ;

  // value method regRead_0_req__read
  output [4 : 0] regRead_0_req_READ;

  // value method regRead_0_req_en
  output regRead_0_req_EN_READ;

  // action method regRead_0_resp_write
  input  [31 : 0] regRead_0_resp_WRITE;

  // value method regRead_1_req__read
  output [4 : 0] regRead_1_req_READ;

  // value method regRead_1_req_en
  output regRead_1_req_EN_READ;

  // action method regRead_1_resp_write
  input  [31 : 0] regRead_1_resp_WRITE;

  // action method wbQ_notFull_write
  input  wbQ_notFull_WRITE;

  // value method wbQ_enq__read
  output [37 : 0] wbQ_enq_READ;

  // value method wbQ_enq_en
  output wbQ_enq_EN_READ;

  // action method wbIndex_write
  input  [4 : 0] wbIndex_WRITE;
  input  wbIndex_EN_WRITE;

  // action method currEpoch_write
  input  currEpoch_WRITE;

  // value method branchPc__read
  output [31 : 0] branchPc_READ;

  // value method branchPc_en
  output branchPc_EN_READ;

  // value method cop_write__read
  output [36 : 0] cop_write_READ;

  // value method cop_write_en
  output cop_write_EN_READ;

  // action method cop_read_write
  input  [31 : 0] cop_read_WRITE;

  // signals for module outputs
  wire [64 : 0] dataReqQ_enq_READ;
  wire [37 : 0] wbQ_enq_READ;
  wire [36 : 0] cop_write_READ;
  wire [31 : 0] branchPc_READ;
  wire [4 : 0] regRead_0_req_READ, regRead_1_req_READ;
  wire branchPc_EN_READ,
       cop_write_EN_READ,
       dataReqQ_enq_EN_READ,
       instQ_deq_READ,
       pcQ_deq_READ,
       regRead_0_req_EN_READ,
       regRead_1_req_EN_READ,
       wbQ_enq_EN_READ;

  // ports of submodule mod__branchPc__data_
  reg [31 : 0] mod__branchPc__data_$IN_WRITE;
  wire [31 : 0] mod__branchPc__data_$OUT_READ;
  wire mod__branchPc__data_$IN_EN_WRITE;

  // ports of submodule mod__branchPc__en_
  wire mod__branchPc__en_$IN_EN_WRITE, mod__branchPc__en_$OUT_READ;

  // ports of submodule mod__cop___read__data_
  wire [31 : 0] mod__cop___read__data_$IN_WRITE,
		mod__cop___read__data_$OUT_READ;
  wire mod__cop___read__data_$IN_EN_WRITE;

  // ports of submodule mod__cop___write___data_
  wire [36 : 0] mod__cop___write___data_$IN_WRITE,
		mod__cop___write___data_$OUT_READ;
  wire mod__cop___write___data_$IN_EN_WRITE;

  // ports of submodule mod__cop___write___en_
  wire mod__cop___write___en_$IN_EN_WRITE, mod__cop___write___en_$OUT_READ;

  // ports of submodule mod__currEpoch___data_
  wire mod__currEpoch___data_$IN_EN_WRITE,
       mod__currEpoch___data_$IN_WRITE,
       mod__currEpoch___data_$OUT_READ;

  // ports of submodule mod__dataReqQ__enq__data_
  wire [64 : 0] mod__dataReqQ__enq__data_$IN_WRITE,
		mod__dataReqQ__enq__data_$OUT_READ;
  wire mod__dataReqQ__enq__data_$IN_EN_WRITE;

  // ports of submodule mod__dataReqQ__enq__en_
  wire mod__dataReqQ__enq__en_$IN_EN_WRITE, mod__dataReqQ__enq__en_$OUT_READ;

  // ports of submodule mod__dataReqQ__notFull___data_
  wire mod__dataReqQ__notFull___data_$IN_EN_WRITE,
       mod__dataReqQ__notFull___data_$IN_WRITE,
       mod__dataReqQ__notFull___data_$OUT_READ;

  // ports of submodule mod__instQ__deq__data_
  wire mod__instQ__deq__data_$IN_EN_WRITE, mod__instQ__deq__data_$OUT_READ;

  // ports of submodule mod__instQ__first___data_
  wire [31 : 0] mod__instQ__first___data_$IN_WRITE,
		mod__instQ__first___data_$OUT_READ;
  wire mod__instQ__first___data_$IN_EN_WRITE;

  // ports of submodule mod__instQ__notEmpty___data_
  wire mod__instQ__notEmpty___data_$IN_EN_WRITE,
       mod__instQ__notEmpty___data_$IN_WRITE,
       mod__instQ__notEmpty___data_$OUT_READ;

  // ports of submodule mod__pcQ__deq__data_
  wire mod__pcQ__deq__data_$IN_EN_WRITE, mod__pcQ__deq__data_$OUT_READ;

  // ports of submodule mod__pcQ__first___data_
  wire [32 : 0] mod__pcQ__first___data_$IN_WRITE,
		mod__pcQ__first___data_$OUT_READ;
  wire mod__pcQ__first___data_$IN_EN_WRITE;

  // ports of submodule mod__pcQ__notEmpty___data_
  wire mod__pcQ__notEmpty___data_$IN_EN_WRITE,
       mod__pcQ__notEmpty___data_$IN_WRITE,
       mod__pcQ__notEmpty___data_$OUT_READ;

  // ports of submodule mod__regRead__req__1_data_
  wire [4 : 0] mod__regRead__req__1_data_$IN_WRITE,
	       mod__regRead__req__1_data_$OUT_READ;
  wire mod__regRead__req__1_data_$IN_EN_WRITE;

  // ports of submodule mod__regRead__req__1_en_
  wire mod__regRead__req__1_en_$IN_EN_WRITE,
       mod__regRead__req__1_en_$OUT_READ;

  // ports of submodule mod__regRead__req__data_
  wire [4 : 0] mod__regRead__req__data_$IN_WRITE,
	       mod__regRead__req__data_$OUT_READ;
  wire mod__regRead__req__data_$IN_EN_WRITE;

  // ports of submodule mod__regRead__req__en_
  wire mod__regRead__req__en_$IN_EN_WRITE, mod__regRead__req__en_$OUT_READ;

  // ports of submodule mod__regRead__resp___1_data_
  wire [31 : 0] mod__regRead__resp___1_data_$IN_WRITE,
		mod__regRead__resp___1_data_$OUT_READ;
  wire mod__regRead__resp___1_data_$IN_EN_WRITE;

  // ports of submodule mod__regRead__resp___data_
  wire [31 : 0] mod__regRead__resp___data_$IN_WRITE,
		mod__regRead__resp___data_$OUT_READ;
  wire mod__regRead__resp___data_$IN_EN_WRITE;

  // ports of submodule mod__wbIndex___data_
  wire [4 : 0] mod__wbIndex___data_$IN_WRITE, mod__wbIndex___data_$OUT_READ;
  wire mod__wbIndex___data_$IN_EN_WRITE;

  // ports of submodule mod__wbIndex___en_
  wire mod__wbIndex___en_$IN_EN_WRITE, mod__wbIndex___en_$OUT_READ;

  // ports of submodule mod__wbQ__enq__data_
  wire [37 : 0] mod__wbQ__enq__data_$IN_WRITE, mod__wbQ__enq__data_$OUT_READ;
  wire mod__wbQ__enq__data_$IN_EN_WRITE;

  // ports of submodule mod__wbQ__enq__en_
  wire mod__wbQ__enq__en_$IN_EN_WRITE, mod__wbQ__enq__en_$OUT_READ;

  // ports of submodule mod__wbQ__notFull___data_
  wire mod__wbQ__notFull___data_$IN_EN_WRITE,
       mod__wbQ__notFull___data_$IN_WRITE,
       mod__wbQ__notFull___data_$OUT_READ;

  // rule scheduling signals
  wire WILL_FIRE_RL_r2;

  // remaining internal signals
  reg [31 : 0] IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341,
	       IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406;
  reg [4 : 0] dest__h3735;
  reg CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q1,
      CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q2,
      CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q4,
      CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q5,
      CASE_mod__instQ__first___data_OUT_READ_BITS_5_ETC__q3,
      CASE_mod__instQ__first___data_OUT_READ_BITS_5_ETC__q6,
      IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d143;
  wire [31 : 0] IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d273,
		b__h4501,
		b__h4574,
		b__h4611,
		b__h4652,
		b__h4690,
		b__h4766,
		b__h4805,
		branchTarget__h4347,
		imm__h20530,
		ret__h20605,
		ret__h25244,
		ret__h25280,
		ret__h25316,
		ret__h29426,
		ret__h29458,
		ret__h29490,
		ret__h29585,
		ret__h29695,
		ret__h29763,
		ret__h29832,
		ret__h29927,
		ret__h29995,
		ret__h30064,
		ret__h30096,
		ret__h30128,
		ret__h30160,
		ret__h30192,
		ret__h30224,
		ret__h30268,
		ret__h30304,
		zimm__h20531;
  wire IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d103,
       IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d129,
       IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d159,
       IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d322,
       IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d324,
       IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d417,
       mod__instQ__first___data___read_BITS_20_TO_16__ETC___d332,
       mod__instQ__first___data___read_BITS_31_TO_26__ETC___d124,
       mod__instQ__first___data___read_BITS_31_TO_26__ETC___d156,
       mod__instQ__first___data___read_BITS_31_TO_26__ETC___d180,
       mod__instQ__first___data___read_BITS_31_TO_26__ETC___d292,
       mod__instQ__first___data___read_BITS_31_TO_26__ETC___d294,
       mod__instQ__first___data___read_BITS_31_TO_26__ETC___d320,
       mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9,
       mod__regRead__resp___data___read__92_EQ_mod__r_ETC___d358,
       mod__regRead__resp___data___read__92_SLE_0___d401,
       mod__wbIndex___data___read__2_EQ_mod__instQ__f_ETC___d101,
       mod__wbIndex___data___read__2_EQ_mod__instQ__f_ETC___d63;

  // value method pcQ_deq__read
  assign pcQ_deq_READ = mod__pcQ__deq__data_$OUT_READ ;

  // value method instQ_deq__read
  assign instQ_deq_READ = mod__instQ__deq__data_$OUT_READ ;

  // value method dataReqQ_enq__read
  assign dataReqQ_enq_READ = mod__dataReqQ__enq__data_$OUT_READ ;

  // value method dataReqQ_enq_en
  assign dataReqQ_enq_EN_READ = mod__dataReqQ__enq__en_$OUT_READ ;

  // value method regRead_0_req__read
  assign regRead_0_req_READ = mod__regRead__req__data_$OUT_READ ;

  // value method regRead_0_req_en
  assign regRead_0_req_EN_READ = mod__regRead__req__en_$OUT_READ ;

  // value method regRead_1_req__read
  assign regRead_1_req_READ = mod__regRead__req__1_data_$OUT_READ ;

  // value method regRead_1_req_en
  assign regRead_1_req_EN_READ = mod__regRead__req__1_en_$OUT_READ ;

  // value method wbQ_enq__read
  assign wbQ_enq_READ = mod__wbQ__enq__data_$OUT_READ ;

  // value method wbQ_enq_en
  assign wbQ_enq_EN_READ = mod__wbQ__enq__en_$OUT_READ ;

  // value method branchPc__read
  assign branchPc_READ = mod__branchPc__data_$OUT_READ ;

  // value method branchPc_en
  assign branchPc_EN_READ = mod__branchPc__en_$OUT_READ ;

  // value method cop_write__read
  assign cop_write_READ = mod__cop___write___data_$OUT_READ ;

  // value method cop_write_en
  assign cop_write_EN_READ = mod__cop___write___en_$OUT_READ ;

  // submodule mod__branchPc__data_
  mkWire #( /*width*/ 32'd32) mod__branchPc__data_(.IN_WRITE(mod__branchPc__data_$IN_WRITE),
						   .IN_EN_WRITE(mod__branchPc__data_$IN_EN_WRITE),
						   .OUT_READ(mod__branchPc__data_$OUT_READ));

  // submodule mod__branchPc__en_
  mkPulse mod__branchPc__en_(.IN_EN_WRITE(mod__branchPc__en_$IN_EN_WRITE),
			     .OUT_READ(mod__branchPc__en_$OUT_READ));

  // submodule mod__cop___read__data_
  mkWire #( /*width*/ 32'd32) mod__cop___read__data_(.IN_WRITE(mod__cop___read__data_$IN_WRITE),
						     .IN_EN_WRITE(mod__cop___read__data_$IN_EN_WRITE),
						     .OUT_READ(mod__cop___read__data_$OUT_READ));

  // submodule mod__cop___write___data_
  mkWire #( /*width*/ 32'd37) mod__cop___write___data_(.IN_WRITE(mod__cop___write___data_$IN_WRITE),
						       .IN_EN_WRITE(mod__cop___write___data_$IN_EN_WRITE),
						       .OUT_READ(mod__cop___write___data_$OUT_READ));

  // submodule mod__cop___write___en_
  mkPulse mod__cop___write___en_(.IN_EN_WRITE(mod__cop___write___en_$IN_EN_WRITE),
				 .OUT_READ(mod__cop___write___en_$OUT_READ));

  // submodule mod__currEpoch___data_
  mkWire #( /*width*/ 32'd1) mod__currEpoch___data_(.IN_WRITE(mod__currEpoch___data_$IN_WRITE),
						    .IN_EN_WRITE(mod__currEpoch___data_$IN_EN_WRITE),
						    .OUT_READ(mod__currEpoch___data_$OUT_READ));

  // submodule mod__dataReqQ__enq__data_
  mkWire #( /*width*/ 32'd65) mod__dataReqQ__enq__data_(.IN_WRITE(mod__dataReqQ__enq__data_$IN_WRITE),
							.IN_EN_WRITE(mod__dataReqQ__enq__data_$IN_EN_WRITE),
							.OUT_READ(mod__dataReqQ__enq__data_$OUT_READ));

  // submodule mod__dataReqQ__enq__en_
  mkPulse mod__dataReqQ__enq__en_(.IN_EN_WRITE(mod__dataReqQ__enq__en_$IN_EN_WRITE),
				  .OUT_READ(mod__dataReqQ__enq__en_$OUT_READ));

  // submodule mod__dataReqQ__notFull___data_
  mkWire #( /*width*/ 32'd1) mod__dataReqQ__notFull___data_(.IN_WRITE(mod__dataReqQ__notFull___data_$IN_WRITE),
							    .IN_EN_WRITE(mod__dataReqQ__notFull___data_$IN_EN_WRITE),
							    .OUT_READ(mod__dataReqQ__notFull___data_$OUT_READ));

  // submodule mod__instQ__deq__data_
  mkPulse mod__instQ__deq__data_(.IN_EN_WRITE(mod__instQ__deq__data_$IN_EN_WRITE),
				 .OUT_READ(mod__instQ__deq__data_$OUT_READ));

  // submodule mod__instQ__first___data_
  mkWire #( /*width*/ 32'd32) mod__instQ__first___data_(.IN_WRITE(mod__instQ__first___data_$IN_WRITE),
							.IN_EN_WRITE(mod__instQ__first___data_$IN_EN_WRITE),
							.OUT_READ(mod__instQ__first___data_$OUT_READ));

  // submodule mod__instQ__notEmpty___data_
  mkWire #( /*width*/ 32'd1) mod__instQ__notEmpty___data_(.IN_WRITE(mod__instQ__notEmpty___data_$IN_WRITE),
							  .IN_EN_WRITE(mod__instQ__notEmpty___data_$IN_EN_WRITE),
							  .OUT_READ(mod__instQ__notEmpty___data_$OUT_READ));

  // submodule mod__pcQ__deq__data_
  mkPulse mod__pcQ__deq__data_(.IN_EN_WRITE(mod__pcQ__deq__data_$IN_EN_WRITE),
			       .OUT_READ(mod__pcQ__deq__data_$OUT_READ));

  // submodule mod__pcQ__first___data_
  mkWire #( /*width*/ 32'd33) mod__pcQ__first___data_(.IN_WRITE(mod__pcQ__first___data_$IN_WRITE),
						      .IN_EN_WRITE(mod__pcQ__first___data_$IN_EN_WRITE),
						      .OUT_READ(mod__pcQ__first___data_$OUT_READ));

  // submodule mod__pcQ__notEmpty___data_
  mkWire #( /*width*/ 32'd1) mod__pcQ__notEmpty___data_(.IN_WRITE(mod__pcQ__notEmpty___data_$IN_WRITE),
							.IN_EN_WRITE(mod__pcQ__notEmpty___data_$IN_EN_WRITE),
							.OUT_READ(mod__pcQ__notEmpty___data_$OUT_READ));

  // submodule mod__regRead__req__1_data_
  mkWire #( /*width*/ 32'd5) mod__regRead__req__1_data_(.IN_WRITE(mod__regRead__req__1_data_$IN_WRITE),
							.IN_EN_WRITE(mod__regRead__req__1_data_$IN_EN_WRITE),
							.OUT_READ(mod__regRead__req__1_data_$OUT_READ));

  // submodule mod__regRead__req__1_en_
  mkPulse mod__regRead__req__1_en_(.IN_EN_WRITE(mod__regRead__req__1_en_$IN_EN_WRITE),
				   .OUT_READ(mod__regRead__req__1_en_$OUT_READ));

  // submodule mod__regRead__req__data_
  mkWire #( /*width*/ 32'd5) mod__regRead__req__data_(.IN_WRITE(mod__regRead__req__data_$IN_WRITE),
						      .IN_EN_WRITE(mod__regRead__req__data_$IN_EN_WRITE),
						      .OUT_READ(mod__regRead__req__data_$OUT_READ));

  // submodule mod__regRead__req__en_
  mkPulse mod__regRead__req__en_(.IN_EN_WRITE(mod__regRead__req__en_$IN_EN_WRITE),
				 .OUT_READ(mod__regRead__req__en_$OUT_READ));

  // submodule mod__regRead__resp___1_data_
  mkWire #( /*width*/ 32'd32) mod__regRead__resp___1_data_(.IN_WRITE(mod__regRead__resp___1_data_$IN_WRITE),
							   .IN_EN_WRITE(mod__regRead__resp___1_data_$IN_EN_WRITE),
							   .OUT_READ(mod__regRead__resp___1_data_$OUT_READ));

  // submodule mod__regRead__resp___data_
  mkWire #( /*width*/ 32'd32) mod__regRead__resp___data_(.IN_WRITE(mod__regRead__resp___data_$IN_WRITE),
							 .IN_EN_WRITE(mod__regRead__resp___data_$IN_EN_WRITE),
							 .OUT_READ(mod__regRead__resp___data_$OUT_READ));

  // submodule mod__wbIndex___data_
  mkWire #( /*width*/ 32'd5) mod__wbIndex___data_(.IN_WRITE(mod__wbIndex___data_$IN_WRITE),
						  .IN_EN_WRITE(mod__wbIndex___data_$IN_EN_WRITE),
						  .OUT_READ(mod__wbIndex___data_$OUT_READ));

  // submodule mod__wbIndex___en_
  mkPulse mod__wbIndex___en_(.IN_EN_WRITE(mod__wbIndex___en_$IN_EN_WRITE),
			     .OUT_READ(mod__wbIndex___en_$OUT_READ));

  // submodule mod__wbQ__enq__data_
  mkWire #( /*width*/ 32'd38) mod__wbQ__enq__data_(.IN_WRITE(mod__wbQ__enq__data_$IN_WRITE),
						   .IN_EN_WRITE(mod__wbQ__enq__data_$IN_EN_WRITE),
						   .OUT_READ(mod__wbQ__enq__data_$OUT_READ));

  // submodule mod__wbQ__enq__en_
  mkPulse mod__wbQ__enq__en_(.IN_EN_WRITE(mod__wbQ__enq__en_$IN_EN_WRITE),
			     .OUT_READ(mod__wbQ__enq__en_$OUT_READ));

  // submodule mod__wbQ__notFull___data_
  mkWire #( /*width*/ 32'd1) mod__wbQ__notFull___data_(.IN_WRITE(mod__wbQ__notFull___data_$IN_WRITE),
						       .IN_EN_WRITE(mod__wbQ__notFull___data_$IN_EN_WRITE),
						       .OUT_READ(mod__wbQ__notFull___data_$OUT_READ));

  // rule RL_r2
  assign WILL_FIRE_RL_r2 =
	     mod__instQ__notEmpty___data_$OUT_READ &&
	     mod__pcQ__notEmpty___data_$OUT_READ &&
	     (!mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9 ||
	      IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d103 ||
	      mod__instQ__first___data___read_BITS_31_TO_26__ETC___d124 &&
	      IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d129) ;

  // submodule mod__branchPc__data_
  always@(mod__instQ__first___data_$OUT_READ or
	  b__h4766 or
	  b__h4805 or
	  mod__regRead__resp___data_$OUT_READ or
	  b__h4501 or b__h4574 or b__h4611 or b__h4652 or b__h4690)
  begin
    case (mod__instQ__first___data_$OUT_READ[31:26])
      6'b0:
	  mod__branchPc__data_$IN_WRITE = mod__regRead__resp___data_$OUT_READ;
      6'b000010, 6'b000011: mod__branchPc__data_$IN_WRITE = b__h4501;
      6'b000100: mod__branchPc__data_$IN_WRITE = b__h4574;
      6'b000101: mod__branchPc__data_$IN_WRITE = b__h4611;
      6'b000110: mod__branchPc__data_$IN_WRITE = b__h4652;
      6'b000111: mod__branchPc__data_$IN_WRITE = b__h4690;
      default: mod__branchPc__data_$IN_WRITE =
		   (mod__instQ__first___data_$OUT_READ[20:16] == 5'd0) ?
		     b__h4766 :
		     b__h4805;
    endcase
  end
  assign mod__branchPc__data_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 &&
	     mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9 &&
	     IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d159 &&
	     mod__instQ__first___data___read_BITS_31_TO_26__ETC___d294 ;

  // submodule mod__branchPc__en_
  assign mod__branchPc__en_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 &&
	     mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9 &&
	     IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d159 &&
	     mod__instQ__first___data___read_BITS_31_TO_26__ETC___d294 ;

  // submodule mod__cop___read__data_
  assign mod__cop___read__data_$IN_WRITE = cop_read_WRITE ;
  assign mod__cop___read__data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__cop___write___data_
  assign mod__cop___write___data_$IN_WRITE =
	     { mod__instQ__first___data_$OUT_READ[15:11],
	       mod__regRead__resp___1_data_$OUT_READ } ;
  assign mod__cop___write___data_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 &&
	     mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9 &&
	     mod__instQ__first___data___read_BITS_20_TO_16__ETC___d332 ;

  // submodule mod__cop___write___en_
  assign mod__cop___write___en_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 &&
	     mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9 &&
	     mod__instQ__first___data___read_BITS_20_TO_16__ETC___d332 ;

  // submodule mod__currEpoch___data_
  assign mod__currEpoch___data_$IN_WRITE = currEpoch_WRITE ;
  assign mod__currEpoch___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__dataReqQ__enq__data_
  assign mod__dataReqQ__enq__data_$IN_WRITE =
	     { mod__instQ__first___data_$OUT_READ[31:26] != 6'b100011,
	       (mod__instQ__first___data_$OUT_READ[31:26] == 6'b100011) ?
		 {2{IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341}} :
		 { IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341,
		   mod__regRead__resp___1_data_$OUT_READ } } ;
  assign mod__dataReqQ__enq__data_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 &&
	     mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9 &&
	     IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d324 ;

  // submodule mod__dataReqQ__enq__en_
  assign mod__dataReqQ__enq__en_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 &&
	     mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9 &&
	     IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d324 ;

  // submodule mod__dataReqQ__notFull___data_
  assign mod__dataReqQ__notFull___data_$IN_WRITE = dataReqQ_notFull_WRITE ;
  assign mod__dataReqQ__notFull___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__instQ__deq__data_
  assign mod__instQ__deq__data_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 &&
	     (IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d159 ||
	      !mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9) ;

  // submodule mod__instQ__first___data_
  assign mod__instQ__first___data_$IN_WRITE = instQ_first_WRITE ;
  assign mod__instQ__first___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__instQ__notEmpty___data_
  assign mod__instQ__notEmpty___data_$IN_WRITE = instQ_notEmpty_WRITE ;
  assign mod__instQ__notEmpty___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__pcQ__deq__data_
  assign mod__pcQ__deq__data_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 &&
	     (IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d159 ||
	      !mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9) ;

  // submodule mod__pcQ__first___data_
  assign mod__pcQ__first___data_$IN_WRITE = pcQ_first_WRITE ;
  assign mod__pcQ__first___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__pcQ__notEmpty___data_
  assign mod__pcQ__notEmpty___data_$IN_WRITE = pcQ_notEmpty_WRITE ;
  assign mod__pcQ__notEmpty___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__regRead__req__1_data_
  assign mod__regRead__req__1_data_$IN_WRITE =
	     mod__instQ__first___data_$OUT_READ[20:16] ;
  assign mod__regRead__req__1_data_$IN_EN_WRITE =
	     mod__instQ__notEmpty___data_$OUT_READ ;

  // submodule mod__regRead__req__1_en_
  assign mod__regRead__req__1_en_$IN_EN_WRITE =
	     mod__instQ__notEmpty___data_$OUT_READ ;

  // submodule mod__regRead__req__data_
  assign mod__regRead__req__data_$IN_WRITE =
	     mod__instQ__first___data_$OUT_READ[25:21] ;
  assign mod__regRead__req__data_$IN_EN_WRITE =
	     mod__instQ__notEmpty___data_$OUT_READ ;

  // submodule mod__regRead__req__en_
  assign mod__regRead__req__en_$IN_EN_WRITE =
	     mod__instQ__notEmpty___data_$OUT_READ ;

  // submodule mod__regRead__resp___1_data_
  assign mod__regRead__resp___1_data_$IN_WRITE = regRead_1_resp_WRITE ;
  assign mod__regRead__resp___1_data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__regRead__resp___data_
  assign mod__regRead__resp___data_$IN_WRITE = regRead_0_resp_WRITE ;
  assign mod__regRead__resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__wbIndex___data_
  assign mod__wbIndex___data_$IN_WRITE = wbIndex_WRITE ;
  assign mod__wbIndex___data_$IN_EN_WRITE = wbIndex_EN_WRITE ;

  // submodule mod__wbIndex___en_
  assign mod__wbIndex___en_$IN_EN_WRITE = wbIndex_EN_WRITE ;

  // submodule mod__wbQ__enq__data_
  assign mod__wbQ__enq__data_$IN_WRITE =
	     { dest__h3735,
	       mod__instQ__first___data_$OUT_READ[31:26] != 6'b100011,
	       IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d273 } ;
  assign mod__wbQ__enq__data_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 &&
	     mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9 &&
	     IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d159 &&
	     mod__instQ__first___data___read_BITS_31_TO_26__ETC___d180 ;

  // submodule mod__wbQ__enq__en_
  assign mod__wbQ__enq__en_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 &&
	     mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9 &&
	     IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d159 &&
	     mod__instQ__first___data___read_BITS_31_TO_26__ETC___d180 ;

  // submodule mod__wbQ__notFull___data_
  assign mod__wbQ__notFull___data_$IN_WRITE = wbQ_notFull_WRITE ;
  assign mod__wbQ__notFull___data_$IN_EN_WRITE = 1'd1 ;

  // remaining internal signals
  assign IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d103 =
	     CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q2 &&
	     mod__wbIndex___en_$OUT_READ &&
	     mod__wbIndex___data___read__2_EQ_mod__instQ__f_ETC___d63 ||
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b100011 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b001001 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b001010 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b001011 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b001100 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b001101 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b001110 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b001111 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b000010 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b000011 &&
	     ((mod__instQ__first___data_$OUT_READ[31:26] == 6'b0) ?
		CASE_mod__instQ__first___data_OUT_READ_BITS_5_ETC__q3 :
		mod__instQ__first___data_$OUT_READ[31:26] != 6'b000110 &&
		mod__instQ__first___data_$OUT_READ[31:26] != 6'b000111 &&
		mod__instQ__first___data_$OUT_READ[31:26] != 6'b000001 &&
		((mod__instQ__first___data_$OUT_READ[31:26] == 6'b010000) ?
		   mod__instQ__first___data_$OUT_READ[25:21] != 5'b0 &&
		   mod__instQ__first___data_$OUT_READ[20:16] != 5'd0 :
		   mod__instQ__first___data_$OUT_READ[20:16] != 5'd0)) &&
	     mod__wbIndex___en_$OUT_READ &&
	     mod__wbIndex___data___read__2_EQ_mod__instQ__f_ETC___d101 ;
  assign IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d129 =
	     (mod__instQ__first___data_$OUT_READ[31:26] == 6'b000010 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000011 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000100 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000101 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000110 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000111 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000001 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b0 &&
	      (mod__instQ__first___data_$OUT_READ[5:0] == 6'b001000 ||
	       mod__instQ__first___data_$OUT_READ[5:0] == 6'b001001)) ?
	       ((mod__instQ__first___data_$OUT_READ[31:26] == 6'b0) ?
		  mod__instQ__first___data_$OUT_READ[5:0] == 6'b001000 :
		  mod__instQ__first___data_$OUT_READ[31:26] != 6'b000011) ||
	       mod__wbQ__notFull___data_$OUT_READ :
	       mod__instQ__first___data_$OUT_READ[31:26] != 6'b100011 ||
	       mod__dataReqQ__notFull___data_$OUT_READ &&
	       mod__wbQ__notFull___data_$OUT_READ ;
  assign IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d159 =
	     (IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d143 ||
	      !mod__wbIndex___en_$OUT_READ ||
	      !mod__wbIndex___data___read__2_EQ_mod__instQ__f_ETC___d63) &&
	     (mod__instQ__first___data___read_BITS_31_TO_26__ETC___d156 ||
	      !mod__wbIndex___data___read__2_EQ_mod__instQ__f_ETC___d101) ;
  assign IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d273 =
	     (mod__instQ__first___data_$OUT_READ[31:26] == 6'b000010 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000011 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000100 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000101 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000110 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000111 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000001 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b0 &&
	      (mod__instQ__first___data_$OUT_READ[5:0] == 6'b001000 ||
	       mod__instQ__first___data_$OUT_READ[5:0] == 6'b001001)) ?
	       mod__pcQ__first___data_$OUT_READ[32:1] :
	       ((mod__instQ__first___data_$OUT_READ[31:26] == 6'b010000 &&
		 mod__instQ__first___data_$OUT_READ[25:21] == 5'b0) ?
		  mod__cop___read__data_$OUT_READ :
		  IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341) ;
  assign IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d322 =
	     (IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d143 ||
	      !mod__wbIndex___en_$OUT_READ ||
	      !mod__wbIndex___data___read__2_EQ_mod__instQ__f_ETC___d63) &&
	     (mod__instQ__first___data___read_BITS_31_TO_26__ETC___d320 ||
	      !mod__wbIndex___data___read__2_EQ_mod__instQ__f_ETC___d101) ;
  assign IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d324 =
	     IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d322 &&
	     (mod__instQ__first___data_$OUT_READ[31:26] == 6'b100011 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b101011) ;
  assign IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d417 =
	     (mod__instQ__first___data_$OUT_READ[31:26] == 6'b0) ?
	       CASE_mod__instQ__first___data_OUT_READ_BITS_5_ETC__q6 :
	       mod__instQ__first___data_$OUT_READ[31:26] == 6'b000110 ||
	       mod__instQ__first___data_$OUT_READ[31:26] == 6'b000111 ||
	       mod__instQ__first___data_$OUT_READ[31:26] == 6'b000001 ||
	       ((mod__instQ__first___data_$OUT_READ[31:26] == 6'b010000) ?
		  mod__instQ__first___data_$OUT_READ[25:21] == 5'b0 ||
		  mod__instQ__first___data_$OUT_READ[20:16] == 5'd0 :
		  mod__instQ__first___data_$OUT_READ[20:16] == 5'd0) ;
  assign b__h4501 =
	     { mod__pcQ__first___data_$OUT_READ[32:29],
	       mod__instQ__first___data_$OUT_READ[25:0],
	       2'b0 } ;
  assign b__h4574 =
	     mod__regRead__resp___data___read__92_EQ_mod__r_ETC___d358 ?
	       branchTarget__h4347 :
	       mod__pcQ__first___data_$OUT_READ[32:1] ;
  assign b__h4611 =
	     mod__regRead__resp___data___read__92_EQ_mod__r_ETC___d358 ?
	       mod__pcQ__first___data_$OUT_READ[32:1] :
	       branchTarget__h4347 ;
  assign b__h4652 =
	     (mod__regRead__resp___data_$OUT_READ == 32'd0 ||
	      mod__regRead__resp___data_$OUT_READ[31]) ?
	       branchTarget__h4347 :
	       mod__pcQ__first___data_$OUT_READ[32:1] ;
  assign b__h4690 =
	     mod__regRead__resp___data___read__92_SLE_0___d401 ?
	       mod__pcQ__first___data_$OUT_READ[32:1] :
	       branchTarget__h4347 ;
  assign b__h4766 =
	     mod__regRead__resp___data_$OUT_READ[31] ?
	       branchTarget__h4347 :
	       mod__pcQ__first___data_$OUT_READ[32:1] ;
  assign b__h4805 =
	     mod__regRead__resp___data_$OUT_READ[31] ?
	       mod__pcQ__first___data_$OUT_READ[32:1] :
	       branchTarget__h4347 ;
  assign branchTarget__h4347 =
	     mod__pcQ__first___data_$OUT_READ[32:1] +
	     { mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15:0],
	       2'd0 } ;
  assign imm__h20530 =
	     { mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15],
	       mod__instQ__first___data_$OUT_READ[15:0] } ;
  assign mod__instQ__first___data___read_BITS_20_TO_16__ETC___d332 =
	     (mod__instQ__first___data_$OUT_READ[20:16] == 5'd0 ||
	      !mod__wbIndex___en_$OUT_READ ||
	      !mod__wbIndex___data___read__2_EQ_mod__instQ__f_ETC___d101) &&
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b010000 &&
	     mod__instQ__first___data_$OUT_READ[25:21] == 5'b00100 ;
  assign mod__instQ__first___data___read_BITS_31_TO_26__ETC___d124 =
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b000010 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b000011 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b000100 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b000101 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b000110 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b000111 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b000001 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b0 &&
	     (mod__instQ__first___data_$OUT_READ[5:0] == 6'b001000 ||
	      mod__instQ__first___data_$OUT_READ[5:0] == 6'b001001) ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b100011 ||
	     ((mod__instQ__first___data_$OUT_READ[31:26] == 6'b101011) ?
		mod__dataReqQ__notFull___data_$OUT_READ :
		((mod__instQ__first___data_$OUT_READ[31:26] == 6'b010000 &&
		  mod__instQ__first___data_$OUT_READ[25:21] == 5'b0) ?
		   mod__wbQ__notFull___data_$OUT_READ :
		   mod__instQ__first___data_$OUT_READ[31:26] == 6'b010000 &&
		   mod__instQ__first___data_$OUT_READ[25:21] == 5'b00100 ||
		   mod__wbQ__notFull___data_$OUT_READ)) ;
  assign mod__instQ__first___data___read_BITS_31_TO_26__ETC___d156 =
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b100011 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001001 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001010 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001011 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001100 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001101 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001110 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001111 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b000010 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b000011 ||
	     IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d417 ||
	     !mod__wbIndex___en_$OUT_READ ;
  assign mod__instQ__first___data___read_BITS_31_TO_26__ETC___d180 =
	     (mod__instQ__first___data_$OUT_READ[31:26] == 6'b000010 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000011 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000100 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000101 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000110 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000111 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000001 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b0 &&
	      (mod__instQ__first___data_$OUT_READ[5:0] == 6'b001000 ||
	       mod__instQ__first___data_$OUT_READ[5:0] == 6'b001001)) &&
	     ((mod__instQ__first___data_$OUT_READ[31:26] == 6'b0) ?
		mod__instQ__first___data_$OUT_READ[5:0] != 6'b001000 :
		mod__instQ__first___data_$OUT_READ[31:26] == 6'b000011) ||
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b000010 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b000011 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b000100 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b000101 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b000110 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b000111 &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b000001 &&
	     (mod__instQ__first___data_$OUT_READ[31:26] != 6'b0 ||
	      mod__instQ__first___data_$OUT_READ[5:0] != 6'b001000 &&
	      mod__instQ__first___data_$OUT_READ[5:0] != 6'b001001) &&
	     mod__instQ__first___data_$OUT_READ[31:26] != 6'b101011 &&
	     (mod__instQ__first___data_$OUT_READ[31:26] != 6'b010000 ||
	      mod__instQ__first___data_$OUT_READ[25:21] != 5'b00100) ;
  assign mod__instQ__first___data___read_BITS_31_TO_26__ETC___d292 =
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b000010 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b000011 ||
	     CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q5 ;
  assign mod__instQ__first___data___read_BITS_31_TO_26__ETC___d294 =
	     (mod__instQ__first___data_$OUT_READ[31:26] == 6'b000010 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000011 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000100 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000101 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000110 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000111 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b000001 ||
	      mod__instQ__first___data_$OUT_READ[31:26] == 6'b0 &&
	      (mod__instQ__first___data_$OUT_READ[5:0] == 6'b001000 ||
	       mod__instQ__first___data_$OUT_READ[5:0] == 6'b001001)) &&
	     (mod__instQ__first___data_$OUT_READ[31:26] == 6'b0 ||
	      mod__instQ__first___data___read_BITS_31_TO_26__ETC___d292) ;
  assign mod__instQ__first___data___read_BITS_31_TO_26__ETC___d320 =
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b100011 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001001 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001010 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001011 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001100 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001101 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001110 ||
	     mod__instQ__first___data_$OUT_READ[31:26] == 6'b001111 ||
	     IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d417 ||
	     !mod__wbIndex___en_$OUT_READ ;
  assign mod__pcQ__first___data___read_BIT_0_EQ_mod__cu_ETC___d9 =
	     mod__pcQ__first___data_$OUT_READ[0] ==
	     mod__currEpoch___data_$OUT_READ ;
  assign mod__regRead__resp___data___read__92_EQ_mod__r_ETC___d358 =
	     mod__regRead__resp___data_$OUT_READ ==
	     mod__regRead__resp___1_data_$OUT_READ ;
  assign mod__regRead__resp___data___read__92_SLE_0___d401 =
	     (mod__regRead__resp___data_$OUT_READ ^ 32'h80000000) <=
	     32'h80000000 ;
  assign mod__wbIndex___data___read__2_EQ_mod__instQ__f_ETC___d101 =
	     mod__wbIndex___data_$OUT_READ ==
	     mod__instQ__first___data_$OUT_READ[20:16] ;
  assign mod__wbIndex___data___read__2_EQ_mod__instQ__f_ETC___d63 =
	     mod__wbIndex___data_$OUT_READ ==
	     mod__instQ__first___data_$OUT_READ[25:21] ;
  assign ret__h20605 = mod__regRead__resp___data_$OUT_READ + imm__h20530 ;
  assign ret__h25244 =
	     ((mod__regRead__resp___data_$OUT_READ ^ 32'h80000000) <
	      (imm__h20530 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign ret__h25280 =
	     (mod__regRead__resp___data_$OUT_READ < imm__h20530) ?
	       32'd1 :
	       32'd0 ;
  assign ret__h25316 = mod__regRead__resp___data_$OUT_READ & zimm__h20531 ;
  assign ret__h29426 = mod__regRead__resp___data_$OUT_READ | zimm__h20531 ;
  assign ret__h29458 = mod__regRead__resp___data_$OUT_READ ^ zimm__h20531 ;
  assign ret__h29490 = { mod__instQ__first___data_$OUT_READ[15:0], 16'b0 } ;
  assign ret__h29585 =
	     mod__regRead__resp___1_data_$OUT_READ <<
	     mod__instQ__first___data_$OUT_READ[10:6] ;
  assign ret__h29695 =
	     mod__regRead__resp___1_data_$OUT_READ >>
	     mod__instQ__first___data_$OUT_READ[10:6] ;
  assign ret__h29763 =
	     mod__regRead__resp___1_data_$OUT_READ >>
	     mod__instQ__first___data_$OUT_READ[10:6] |
	     ~(32'hFFFFFFFF >> mod__instQ__first___data_$OUT_READ[10:6]) &
	     {32{mod__regRead__resp___1_data_$OUT_READ[31]}} ;
  assign ret__h29832 =
	     mod__regRead__resp___1_data_$OUT_READ <<
	     mod__regRead__resp___data_$OUT_READ[4:0] ;
  assign ret__h29927 =
	     mod__regRead__resp___1_data_$OUT_READ >>
	     mod__regRead__resp___data_$OUT_READ[4:0] ;
  assign ret__h29995 =
	     mod__regRead__resp___1_data_$OUT_READ >>
	     mod__regRead__resp___data_$OUT_READ[4:0] |
	     ~(32'hFFFFFFFF >> mod__regRead__resp___data_$OUT_READ[4:0]) &
	     {32{mod__regRead__resp___1_data_$OUT_READ[31]}} ;
  assign ret__h30064 =
	     mod__regRead__resp___data_$OUT_READ +
	     mod__regRead__resp___1_data_$OUT_READ ;
  assign ret__h30096 =
	     mod__regRead__resp___data_$OUT_READ -
	     mod__regRead__resp___1_data_$OUT_READ ;
  assign ret__h30128 =
	     mod__regRead__resp___data_$OUT_READ &
	     mod__regRead__resp___1_data_$OUT_READ ;
  assign ret__h30160 =
	     mod__regRead__resp___data_$OUT_READ |
	     mod__regRead__resp___1_data_$OUT_READ ;
  assign ret__h30192 =
	     mod__regRead__resp___data_$OUT_READ ^
	     mod__regRead__resp___1_data_$OUT_READ ;
  assign ret__h30224 = ~ret__h30160 ;
  assign ret__h30268 =
	     ((mod__regRead__resp___data_$OUT_READ ^ 32'h80000000) <
	      (mod__regRead__resp___1_data_$OUT_READ ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign ret__h30304 =
	     (mod__regRead__resp___data_$OUT_READ <
	      mod__regRead__resp___1_data_$OUT_READ) ?
	       32'd1 :
	       32'd0 ;
  assign zimm__h20531 = { 16'd0, mod__instQ__first___data_$OUT_READ[15:0] } ;
  always@(mod__instQ__first___data_$OUT_READ)
  begin
    case (mod__instQ__first___data_$OUT_READ[31:26])
      6'b000011: dest__h3735 = 5'd31;
      6'b001001,
      6'b001010,
      6'b001011,
      6'b001100,
      6'b001101,
      6'b001110,
      6'b001111,
      6'b010000,
      6'b100011:
	  dest__h3735 = mod__instQ__first___data_$OUT_READ[20:16];
      default: dest__h3735 = mod__instQ__first___data_$OUT_READ[15:11];
    endcase
  end
  always@(mod__instQ__first___data_$OUT_READ)
  begin
    case (mod__instQ__first___data_$OUT_READ[31:26])
      6'b0:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q1 =
	      mod__instQ__first___data_$OUT_READ[5:0] != 6'b0 &&
	      mod__instQ__first___data_$OUT_READ[5:0] != 6'b000010 &&
	      mod__instQ__first___data_$OUT_READ[5:0] != 6'b000011 &&
	      mod__instQ__first___data_$OUT_READ[25:21] != 5'b0;
      6'b000001, 6'b000110, 6'b000111:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q1 =
	      mod__instQ__first___data_$OUT_READ[25:21] != 5'b0;
      6'b010000:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q1 =
	      mod__instQ__first___data_$OUT_READ[25:21] != 5'b0 &&
	      mod__instQ__first___data_$OUT_READ[25:21] != 5'b00100;
      default: CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q1 =
		   mod__instQ__first___data_$OUT_READ[25:21] != 5'b0;
    endcase
  end
  always@(mod__instQ__first___data_$OUT_READ or
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q1)
  begin
    case (mod__instQ__first___data_$OUT_READ[31:26])
      6'b001001,
      6'b001010,
      6'b001011,
      6'b001100,
      6'b001101,
      6'b001110,
      6'b100011:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q2 =
	      mod__instQ__first___data_$OUT_READ[25:21] != 5'b0;
      default: CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q2 =
		   mod__instQ__first___data_$OUT_READ[31:26] != 6'b001111 &&
		   mod__instQ__first___data_$OUT_READ[31:26] != 6'b000010 &&
		   mod__instQ__first___data_$OUT_READ[31:26] != 6'b000011 &&
		   CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q1;
    endcase
  end
  always@(mod__instQ__first___data_$OUT_READ)
  begin
    case (mod__instQ__first___data_$OUT_READ[5:0])
      6'b0, 6'b000010, 6'b000011:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_5_ETC__q3 =
	      mod__instQ__first___data_$OUT_READ[20:16] != 5'd0;
      default: CASE_mod__instQ__first___data_OUT_READ_BITS_5_ETC__q3 =
		   mod__instQ__first___data_$OUT_READ[5:0] != 6'b001000 &&
		   mod__instQ__first___data_$OUT_READ[5:0] != 6'b001001 &&
		   mod__instQ__first___data_$OUT_READ[20:16] != 5'd0;
    endcase
  end
  always@(mod__instQ__first___data_$OUT_READ)
  begin
    case (mod__instQ__first___data_$OUT_READ[31:26])
      6'b0:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q4 =
	      mod__instQ__first___data_$OUT_READ[5:0] == 6'b0 ||
	      mod__instQ__first___data_$OUT_READ[5:0] == 6'b000010 ||
	      mod__instQ__first___data_$OUT_READ[5:0] == 6'b000011 ||
	      mod__instQ__first___data_$OUT_READ[25:21] == 5'b0;
      6'b000001, 6'b000110, 6'b000111:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q4 =
	      mod__instQ__first___data_$OUT_READ[25:21] == 5'b0;
      6'b010000:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q4 =
	      mod__instQ__first___data_$OUT_READ[25:21] == 5'b0 ||
	      mod__instQ__first___data_$OUT_READ[25:21] == 5'b00100;
      default: CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q4 =
		   mod__instQ__first___data_$OUT_READ[25:21] == 5'b0;
    endcase
  end
  always@(mod__instQ__first___data_$OUT_READ or
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q4)
  begin
    case (mod__instQ__first___data_$OUT_READ[31:26])
      6'b001001,
      6'b001010,
      6'b001011,
      6'b001100,
      6'b001101,
      6'b001110,
      6'b100011:
	  IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d143 =
	      mod__instQ__first___data_$OUT_READ[25:21] == 5'b0;
      default: IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d143 =
		   mod__instQ__first___data_$OUT_READ[31:26] == 6'b001111 ||
		   mod__instQ__first___data_$OUT_READ[31:26] == 6'b000010 ||
		   mod__instQ__first___data_$OUT_READ[31:26] == 6'b000011 ||
		   CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q4;
    endcase
  end
  always@(mod__instQ__first___data_$OUT_READ or
	  mod__regRead__resp___data_$OUT_READ or
	  mod__regRead__resp___data___read__92_EQ_mod__r_ETC___d358 or
	  mod__regRead__resp___data___read__92_SLE_0___d401)
  begin
    case (mod__instQ__first___data_$OUT_READ[31:26])
      6'b000100:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q5 =
	      mod__regRead__resp___data___read__92_EQ_mod__r_ETC___d358;
      6'b000101:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q5 =
	      !mod__regRead__resp___data___read__92_EQ_mod__r_ETC___d358;
      6'b000110:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q5 =
	      mod__regRead__resp___data_$OUT_READ == 32'd0 ||
	      mod__regRead__resp___data_$OUT_READ[31];
      6'b000111:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q5 =
	      !mod__regRead__resp___data___read__92_SLE_0___d401;
      default: CASE_mod__instQ__first___data_OUT_READ_BITS_3_ETC__q5 =
		   !(mod__instQ__first___data_$OUT_READ[20:16] == 5'd0 ^
		     mod__regRead__resp___data_$OUT_READ[31]);
    endcase
  end
  always@(mod__instQ__first___data_$OUT_READ)
  begin
    case (mod__instQ__first___data_$OUT_READ[5:0])
      6'b0, 6'b000010, 6'b000011:
	  CASE_mod__instQ__first___data_OUT_READ_BITS_5_ETC__q6 =
	      mod__instQ__first___data_$OUT_READ[20:16] == 5'd0;
      default: CASE_mod__instQ__first___data_OUT_READ_BITS_5_ETC__q6 =
		   mod__instQ__first___data_$OUT_READ[5:0] == 6'b001000 ||
		   mod__instQ__first___data_$OUT_READ[5:0] == 6'b001001 ||
		   mod__instQ__first___data_$OUT_READ[20:16] == 5'd0;
    endcase
  end
  always@(mod__instQ__first___data_$OUT_READ or
	  ret__h30304 or
	  ret__h29585 or
	  ret__h29695 or
	  ret__h29763 or
	  ret__h29832 or
	  ret__h29927 or
	  ret__h29995 or
	  ret__h30064 or
	  ret__h30096 or
	  ret__h30128 or
	  ret__h30160 or ret__h30192 or ret__h30224 or ret__h30268)
  begin
    case (mod__instQ__first___data_$OUT_READ[5:0])
      6'b0:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h29585;
      6'b000010:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h29695;
      6'b000011:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h29763;
      6'b000100:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h29832;
      6'b000110:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h29927;
      6'b000111:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h29995;
      6'b100001:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h30064;
      6'b100011:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h30096;
      6'b100100:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h30128;
      6'b100101:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h30160;
      6'b100110:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h30192;
      6'b100111:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h30224;
      6'b101010:
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
	      ret__h30268;
      default: IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 =
		   ret__h30304;
    endcase
  end
  always@(mod__instQ__first___data_$OUT_READ or
	  IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406 or
	  ret__h20605 or
	  ret__h25244 or
	  ret__h25280 or
	  ret__h25316 or ret__h29426 or ret__h29458 or ret__h29490)
  begin
    case (mod__instQ__first___data_$OUT_READ[31:26])
      6'b001001, 6'b100011, 6'b101011:
	  IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341 =
	      ret__h20605;
      6'b001010:
	  IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341 =
	      ret__h25244;
      6'b001011:
	  IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341 =
	      ret__h25280;
      6'b001100:
	  IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341 =
	      ret__h25316;
      6'b001101:
	  IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341 =
	      ret__h29426;
      6'b001110:
	  IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341 =
	      ret__h29458;
      6'b001111:
	  IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341 =
	      ret__h29490;
      default: IF_mod__instQ__first___data___read_BITS_31_TO__ETC___d341 =
		   IF_mod__instQ__first___data___read_BITS_5_TO_0_ETC___d406;
    endcase
  end
endmodule  // mkExecute

