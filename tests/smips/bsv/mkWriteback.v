//
// Generated by Bluespec Compiler, version 2011.04.C (build 23804, 2011-04-18)
//
// On Wed Aug  3 12:04:09 EDT 2011
//
// Method conflict info:
// Method: wb_notFull__read
// Conflict-free: wb_notFull__read,
// 	       wb_enq_write,
// 	       wbIndex__read,
// 	       wbIndex_en,
// 	       dataQ_notEmpty_write,
// 	       dataQ_first_write,
// 	       dataQ_deq__read,
// 	       regWrite__read,
// 	       regWrite_en
//
// Method: wb_enq_write
// Conflict-free: wb_notFull__read,
// 	       wbIndex__read,
// 	       wbIndex_en,
// 	       dataQ_notEmpty_write,
// 	       dataQ_first_write,
// 	       dataQ_deq__read,
// 	       regWrite__read,
// 	       regWrite_en
// Conflicts: wb_enq_write
//
// Method: wbIndex__read
// Conflict-free: wb_notFull__read,
// 	       wb_enq_write,
// 	       wbIndex__read,
// 	       wbIndex_en,
// 	       dataQ_notEmpty_write,
// 	       dataQ_first_write,
// 	       dataQ_deq__read,
// 	       regWrite__read,
// 	       regWrite_en
//
// Method: wbIndex_en
// Conflict-free: wb_notFull__read,
// 	       wb_enq_write,
// 	       wbIndex__read,
// 	       wbIndex_en,
// 	       dataQ_notEmpty_write,
// 	       dataQ_first_write,
// 	       dataQ_deq__read,
// 	       regWrite__read,
// 	       regWrite_en
//
// Method: dataQ_notEmpty_write
// Conflict-free: wb_notFull__read,
// 	       wb_enq_write,
// 	       wbIndex__read,
// 	       wbIndex_en,
// 	       dataQ_first_write,
// 	       dataQ_deq__read,
// 	       regWrite__read,
// 	       regWrite_en
// Conflicts: dataQ_notEmpty_write
//
// Method: dataQ_first_write
// Conflict-free: wb_notFull__read,
// 	       wb_enq_write,
// 	       wbIndex__read,
// 	       wbIndex_en,
// 	       dataQ_notEmpty_write,
// 	       dataQ_deq__read,
// 	       regWrite__read,
// 	       regWrite_en
// Conflicts: dataQ_first_write
//
// Method: dataQ_deq__read
// Conflict-free: wb_notFull__read,
// 	       wb_enq_write,
// 	       wbIndex__read,
// 	       wbIndex_en,
// 	       dataQ_notEmpty_write,
// 	       dataQ_first_write,
// 	       dataQ_deq__read,
// 	       regWrite__read,
// 	       regWrite_en
//
// Method: regWrite__read
// Conflict-free: wb_notFull__read,
// 	       wb_enq_write,
// 	       wbIndex__read,
// 	       wbIndex_en,
// 	       dataQ_notEmpty_write,
// 	       dataQ_first_write,
// 	       dataQ_deq__read,
// 	       regWrite__read,
// 	       regWrite_en
//
// Method: regWrite_en
// Conflict-free: wb_notFull__read,
// 	       wb_enq_write,
// 	       wbIndex__read,
// 	       wbIndex_en,
// 	       dataQ_notEmpty_write,
// 	       dataQ_first_write,
// 	       dataQ_deq__read,
// 	       regWrite__read,
// 	       regWrite_en
//
//
// Ports:
// Name                         I/O  size props
// wb_notFull_READ                O     1
// wbIndex_READ                   O     5
// wbIndex_EN_READ                O     1
// dataQ_deq_READ                 O     1
// regWrite_READ                  O    37
// regWrite_EN_READ               O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wb_enq_WRITE                   I    38
// dataQ_notEmpty_WRITE           I     1
// dataQ_first_WRITE              I    32
// wb_enq_EN_WRITE                I     1
//
// Combinational paths from inputs to outputs:
//   (dataQ_notEmpty_WRITE, dataQ_first_WRITE) -> regWrite_READ
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkWriteback(CLK,
		   RST_N,

		   wb_notFull_READ,

		   wb_enq_WRITE,
		   wb_enq_EN_WRITE,

		   wbIndex_READ,

		   wbIndex_EN_READ,

		   dataQ_notEmpty_WRITE,

		   dataQ_first_WRITE,

		   dataQ_deq_READ,

		   regWrite_READ,

		   regWrite_EN_READ);
  input  CLK;
  input  RST_N;

  // value method wb_notFull__read
  output wb_notFull_READ;

  // action method wb_enq_write
  input  [37 : 0] wb_enq_WRITE;
  input  wb_enq_EN_WRITE;

  // value method wbIndex__read
  output [4 : 0] wbIndex_READ;

  // value method wbIndex_en
  output wbIndex_EN_READ;

  // action method dataQ_notEmpty_write
  input  dataQ_notEmpty_WRITE;

  // action method dataQ_first_write
  input  [31 : 0] dataQ_first_WRITE;

  // value method dataQ_deq__read
  output dataQ_deq_READ;

  // value method regWrite__read
  output [36 : 0] regWrite_READ;

  // value method regWrite_en
  output regWrite_EN_READ;

  // signals for module outputs
  wire [36 : 0] regWrite_READ;
  wire [4 : 0] wbIndex_READ;
  wire dataQ_deq_READ, regWrite_EN_READ, wbIndex_EN_READ, wb_notFull_READ;

  // ports of submodule mod__dataQ__deq__data_
  wire mod__dataQ__deq__data_$IN_EN_WRITE, mod__dataQ__deq__data_$OUT_READ;

  // ports of submodule mod__dataQ__first___data_
  wire [31 : 0] mod__dataQ__first___data_$IN_WRITE,
		mod__dataQ__first___data_$OUT_READ;
  wire mod__dataQ__first___data_$IN_EN_WRITE;

  // ports of submodule mod__dataQ__notEmpty___data_
  wire mod__dataQ__notEmpty___data_$IN_EN_WRITE,
       mod__dataQ__notEmpty___data_$IN_WRITE,
       mod__dataQ__notEmpty___data_$OUT_READ;

  // ports of submodule mod__regWrite__data_
  wire [36 : 0] mod__regWrite__data_$IN_WRITE, mod__regWrite__data_$OUT_READ;
  wire mod__regWrite__data_$IN_EN_WRITE;

  // ports of submodule mod__regWrite__en_
  wire mod__regWrite__en_$IN_EN_WRITE, mod__regWrite__en_$OUT_READ;

  // ports of submodule mod__wbIndex__data_
  wire [4 : 0] mod__wbIndex__data_$IN_WRITE, mod__wbIndex__data_$OUT_READ;
  wire mod__wbIndex__data_$IN_EN_WRITE;

  // ports of submodule mod__wbIndex__en_
  wire mod__wbIndex__en_$IN_EN_WRITE, mod__wbIndex__en_$OUT_READ;

  // ports of submodule mod__wb___enq__data_
  wire [37 : 0] mod__wb___enq__data_$IN_WRITE, mod__wb___enq__data_$OUT_READ;
  wire mod__wb___enq__data_$IN_EN_WRITE;

  // ports of submodule mod__wb___enq__en_
  wire mod__wb___enq__en_$IN_EN_WRITE, mod__wb___enq__en_$OUT_READ;

  // ports of submodule mod__wb___notFull___data_
  wire mod__wb___notFull___data_$IN_EN_WRITE,
       mod__wb___notFull___data_$IN_WRITE,
       mod__wb___notFull___data_$OUT_READ;

  // ports of submodule wbQ_head
  wire wbQ_head$IN_EN_WRITE;

  // ports of submodule wbQ_mod__deq___deq__data_
  wire wbQ_mod__deq___deq__data_$IN_EN_WRITE,
       wbQ_mod__deq___deq__data_$OUT_READ;

  // ports of submodule wbQ_mod__deq___first___data_
  wire [37 : 0] wbQ_mod__deq___first___data_$IN_WRITE,
		wbQ_mod__deq___first___data_$OUT_READ;
  wire wbQ_mod__deq___first___data_$IN_EN_WRITE;

  // ports of submodule wbQ_mod__deq___notEmpty___data_
  wire wbQ_mod__deq___notEmpty___data_$IN_EN_WRITE,
       wbQ_mod__deq___notEmpty___data_$IN_WRITE,
       wbQ_mod__deq___notEmpty___data_$OUT_READ;

  // ports of submodule wbQ_mod__enq___enq__data_
  wire [37 : 0] wbQ_mod__enq___enq__data_$IN_WRITE,
		wbQ_mod__enq___enq__data_$OUT_READ;
  wire wbQ_mod__enq___enq__data_$IN_EN_WRITE;

  // ports of submodule wbQ_mod__enq___enq__en_
  wire wbQ_mod__enq___enq__en_$IN_EN_WRITE, wbQ_mod__enq___enq__en_$OUT_READ;

  // ports of submodule wbQ_mod__enq___notFull___data_
  wire wbQ_mod__enq___notFull___data_$IN_EN_WRITE,
       wbQ_mod__enq___notFull___data_$IN_WRITE,
       wbQ_mod__enq___notFull___data_$OUT_READ;

  // ports of submodule wbQ_numElems
  wire wbQ_numElems$IN_EN_WRITE, wbQ_numElems$IN_WRITE, wbQ_numElems$OUT_READ;

  // ports of submodule wbQ_regs_mod__mod__read___req__data_
  wire wbQ_regs_mod__mod__read___req__data_$IN_EN_WRITE;

  // ports of submodule wbQ_regs_mod__mod__read___req__en_
  wire wbQ_regs_mod__mod__read___req__en_$IN_EN_WRITE;

  // ports of submodule wbQ_regs_mod__mod__read___resp___data_
  wire [37 : 0] wbQ_regs_mod__mod__read___resp___data_$IN_WRITE,
		wbQ_regs_mod__mod__read___resp___data_$OUT_READ;
  wire wbQ_regs_mod__mod__read___resp___data_$IN_EN_WRITE;

  // ports of submodule wbQ_regs_mod__mod__write___data_
  wire [37 : 0] wbQ_regs_mod__mod__write___data_$IN_WRITE,
		wbQ_regs_mod__mod__write___data_$OUT_READ;
  wire wbQ_regs_mod__mod__write___data_$IN_EN_WRITE;

  // ports of submodule wbQ_regs_mod__mod__write___en_
  wire wbQ_regs_mod__mod__write___en_$IN_EN_WRITE,
       wbQ_regs_mod__mod__write___en_$OUT_READ;

  // ports of submodule wbQ_regs_mod__rf_mod__read___req__data_
  wire wbQ_regs_mod__rf_mod__read___req__data_$IN_EN_WRITE;

  // ports of submodule wbQ_regs_mod__rf_mod__read___req__en_
  wire wbQ_regs_mod__rf_mod__read___req__en_$IN_EN_WRITE;

  // ports of submodule wbQ_regs_mod__rf_mod__read___resp___data_
  wire [37 : 0] wbQ_regs_mod__rf_mod__read___resp___data_$IN_WRITE,
		wbQ_regs_mod__rf_mod__read___resp___data_$OUT_READ;
  wire wbQ_regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE;

  // ports of submodule wbQ_regs_mod__rf_mod__write___data_
  wire [37 : 0] wbQ_regs_mod__rf_mod__write___data_$IN_WRITE,
		wbQ_regs_mod__rf_mod__write___data_$OUT_READ;
  wire wbQ_regs_mod__rf_mod__write___data_$IN_EN_WRITE;

  // ports of submodule wbQ_regs_mod__rf_mod__write___en_
  wire wbQ_regs_mod__rf_mod__write___en_$IN_EN_WRITE,
       wbQ_regs_mod__rf_mod__write___en_$OUT_READ;

  // ports of submodule wbQ_regs_mod__rf_rf
  wire [37 : 0] wbQ_regs_mod__rf_rf$READ_RESP_READ,
		wbQ_regs_mod__rf_rf$WRITE_DATA_WRITE;
  wire wbQ_regs_mod__rf_rf$WRITE_EN_WRITE;

  // ports of submodule wbQ_regs_mod__whichReg
  wire wbQ_regs_mod__whichReg$IN_EN_WRITE;

  // ports of submodule wbQ_tail
  wire wbQ_tail$IN_EN_WRITE;

  // rule scheduling signals
  wire WILL_FIRE_RL_c1_1;

  // remaining internal signals
  wire [1 : 0] _0_CONCAT_wbQ_mod__enq___enq__en_OUT_READ_MINU_ETC__q1;

  // value method wb_notFull__read
  assign wb_notFull_READ = mod__wb___notFull___data_$OUT_READ ;

  // value method wbIndex__read
  assign wbIndex_READ = mod__wbIndex__data_$OUT_READ ;

  // value method wbIndex_en
  assign wbIndex_EN_READ = mod__wbIndex__en_$OUT_READ ;

  // value method dataQ_deq__read
  assign dataQ_deq_READ = mod__dataQ__deq__data_$OUT_READ ;

  // value method regWrite__read
  assign regWrite_READ = mod__regWrite__data_$OUT_READ ;

  // value method regWrite_en
  assign regWrite_EN_READ = mod__regWrite__en_$OUT_READ ;

  // submodule mod__dataQ__deq__data_
  mkPulse mod__dataQ__deq__data_(.IN_EN_WRITE(mod__dataQ__deq__data_$IN_EN_WRITE),
				 .OUT_READ(mod__dataQ__deq__data_$OUT_READ));

  // submodule mod__dataQ__first___data_
  mkWire #( /*width*/ 32'd32) mod__dataQ__first___data_(.IN_WRITE(mod__dataQ__first___data_$IN_WRITE),
							.IN_EN_WRITE(mod__dataQ__first___data_$IN_EN_WRITE),
							.OUT_READ(mod__dataQ__first___data_$OUT_READ));

  // submodule mod__dataQ__notEmpty___data_
  mkWire #( /*width*/ 32'd1) mod__dataQ__notEmpty___data_(.IN_WRITE(mod__dataQ__notEmpty___data_$IN_WRITE),
							  .IN_EN_WRITE(mod__dataQ__notEmpty___data_$IN_EN_WRITE),
							  .OUT_READ(mod__dataQ__notEmpty___data_$OUT_READ));

  // submodule mod__regWrite__data_
  mkWire #( /*width*/ 32'd37) mod__regWrite__data_(.IN_WRITE(mod__regWrite__data_$IN_WRITE),
						   .IN_EN_WRITE(mod__regWrite__data_$IN_EN_WRITE),
						   .OUT_READ(mod__regWrite__data_$OUT_READ));

  // submodule mod__regWrite__en_
  mkPulse mod__regWrite__en_(.IN_EN_WRITE(mod__regWrite__en_$IN_EN_WRITE),
			     .OUT_READ(mod__regWrite__en_$OUT_READ));

  // submodule mod__wbIndex__data_
  mkWire #( /*width*/ 32'd5) mod__wbIndex__data_(.IN_WRITE(mod__wbIndex__data_$IN_WRITE),
						 .IN_EN_WRITE(mod__wbIndex__data_$IN_EN_WRITE),
						 .OUT_READ(mod__wbIndex__data_$OUT_READ));

  // submodule mod__wbIndex__en_
  mkPulse mod__wbIndex__en_(.IN_EN_WRITE(mod__wbIndex__en_$IN_EN_WRITE),
			    .OUT_READ(mod__wbIndex__en_$OUT_READ));

  // submodule mod__wb___enq__data_
  mkWire #( /*width*/ 32'd38) mod__wb___enq__data_(.IN_WRITE(mod__wb___enq__data_$IN_WRITE),
						   .IN_EN_WRITE(mod__wb___enq__data_$IN_EN_WRITE),
						   .OUT_READ(mod__wb___enq__data_$OUT_READ));

  // submodule mod__wb___enq__en_
  mkPulse mod__wb___enq__en_(.IN_EN_WRITE(mod__wb___enq__en_$IN_EN_WRITE),
			     .OUT_READ(mod__wb___enq__en_$OUT_READ));

  // submodule mod__wb___notFull___data_
  mkWire #( /*width*/ 32'd1) mod__wb___notFull___data_(.IN_WRITE(mod__wb___notFull___data_$IN_WRITE),
						       .IN_EN_WRITE(mod__wb___notFull___data_$IN_EN_WRITE),
						       .OUT_READ(mod__wb___notFull___data_$OUT_READ));

  // submodule wbQ_head
  mkReg #( /*width*/ 32'd1) wbQ_head(.CLK(CLK),
				     .RST_N(RST_N),
				     .IN_EN_WRITE(wbQ_head$IN_EN_WRITE));

  // submodule wbQ_mod__deq___deq__data_
  mkPulse wbQ_mod__deq___deq__data_(.IN_EN_WRITE(wbQ_mod__deq___deq__data_$IN_EN_WRITE),
				    .OUT_READ(wbQ_mod__deq___deq__data_$OUT_READ));

  // submodule wbQ_mod__deq___first___data_
  mkWire #( /*width*/ 32'd38) wbQ_mod__deq___first___data_(.IN_WRITE(wbQ_mod__deq___first___data_$IN_WRITE),
							   .IN_EN_WRITE(wbQ_mod__deq___first___data_$IN_EN_WRITE),
							   .OUT_READ(wbQ_mod__deq___first___data_$OUT_READ));

  // submodule wbQ_mod__deq___notEmpty___data_
  mkWire #( /*width*/ 32'd1) wbQ_mod__deq___notEmpty___data_(.IN_WRITE(wbQ_mod__deq___notEmpty___data_$IN_WRITE),
							     .IN_EN_WRITE(wbQ_mod__deq___notEmpty___data_$IN_EN_WRITE),
							     .OUT_READ(wbQ_mod__deq___notEmpty___data_$OUT_READ));

  // submodule wbQ_mod__enq___enq__data_
  mkWire #( /*width*/ 32'd38) wbQ_mod__enq___enq__data_(.IN_WRITE(wbQ_mod__enq___enq__data_$IN_WRITE),
							.IN_EN_WRITE(wbQ_mod__enq___enq__data_$IN_EN_WRITE),
							.OUT_READ(wbQ_mod__enq___enq__data_$OUT_READ));

  // submodule wbQ_mod__enq___enq__en_
  mkPulse wbQ_mod__enq___enq__en_(.IN_EN_WRITE(wbQ_mod__enq___enq__en_$IN_EN_WRITE),
				  .OUT_READ(wbQ_mod__enq___enq__en_$OUT_READ));

  // submodule wbQ_mod__enq___notFull___data_
  mkWire #( /*width*/ 32'd1) wbQ_mod__enq___notFull___data_(.IN_WRITE(wbQ_mod__enq___notFull___data_$IN_WRITE),
							    .IN_EN_WRITE(wbQ_mod__enq___notFull___data_$IN_EN_WRITE),
							    .OUT_READ(wbQ_mod__enq___notFull___data_$OUT_READ));

  // submodule wbQ_numElems
  mkReg #( /*width*/ 32'd1,  /*init*/ 1'd0) wbQ_numElems(.CLK(CLK),
							 .RST_N(RST_N),
							 .IN_WRITE(wbQ_numElems$IN_WRITE),
							 .IN_EN_WRITE(wbQ_numElems$IN_EN_WRITE),
							 .OUT_READ(wbQ_numElems$OUT_READ));

  // submodule wbQ_regs_mod__mod__read___req__data_
  mkWire #( /*width*/ 32'd1) wbQ_regs_mod__mod__read___req__data_(.IN_EN_WRITE(wbQ_regs_mod__mod__read___req__data_$IN_EN_WRITE));

  // submodule wbQ_regs_mod__mod__read___req__en_
  mkPulse wbQ_regs_mod__mod__read___req__en_(.IN_EN_WRITE(wbQ_regs_mod__mod__read___req__en_$IN_EN_WRITE),
					     .OUT_READ());

  // submodule wbQ_regs_mod__mod__read___resp___data_
  mkWire #( /*width*/ 32'd38) wbQ_regs_mod__mod__read___resp___data_(.IN_WRITE(wbQ_regs_mod__mod__read___resp___data_$IN_WRITE),
								     .IN_EN_WRITE(wbQ_regs_mod__mod__read___resp___data_$IN_EN_WRITE),
								     .OUT_READ(wbQ_regs_mod__mod__read___resp___data_$OUT_READ));

  // submodule wbQ_regs_mod__mod__write___data_
  mkWire #( /*width*/ 32'd38) wbQ_regs_mod__mod__write___data_(.IN_WRITE(wbQ_regs_mod__mod__write___data_$IN_WRITE),
							       .IN_EN_WRITE(wbQ_regs_mod__mod__write___data_$IN_EN_WRITE),
							       .OUT_READ(wbQ_regs_mod__mod__write___data_$OUT_READ));

  // submodule wbQ_regs_mod__mod__write___en_
  mkPulse wbQ_regs_mod__mod__write___en_(.IN_EN_WRITE(wbQ_regs_mod__mod__write___en_$IN_EN_WRITE),
					 .OUT_READ(wbQ_regs_mod__mod__write___en_$OUT_READ));

  // submodule wbQ_regs_mod__rf_mod__read___req__data_
  mkWire #( /*width*/ 32'd1) wbQ_regs_mod__rf_mod__read___req__data_(.IN_EN_WRITE(wbQ_regs_mod__rf_mod__read___req__data_$IN_EN_WRITE));

  // submodule wbQ_regs_mod__rf_mod__read___req__en_
  mkPulse wbQ_regs_mod__rf_mod__read___req__en_(.IN_EN_WRITE(wbQ_regs_mod__rf_mod__read___req__en_$IN_EN_WRITE),
						.OUT_READ());

  // submodule wbQ_regs_mod__rf_mod__read___resp___data_
  mkWire #( /*width*/ 32'd38) wbQ_regs_mod__rf_mod__read___resp___data_(.IN_WRITE(wbQ_regs_mod__rf_mod__read___resp___data_$IN_WRITE),
									.IN_EN_WRITE(wbQ_regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE),
									.OUT_READ(wbQ_regs_mod__rf_mod__read___resp___data_$OUT_READ));

  // submodule wbQ_regs_mod__rf_mod__write___data_
  mkWire #( /*width*/ 32'd38) wbQ_regs_mod__rf_mod__write___data_(.IN_WRITE(wbQ_regs_mod__rf_mod__write___data_$IN_WRITE),
								  .IN_EN_WRITE(wbQ_regs_mod__rf_mod__write___data_$IN_EN_WRITE),
								  .OUT_READ(wbQ_regs_mod__rf_mod__write___data_$OUT_READ));

  // submodule wbQ_regs_mod__rf_mod__write___en_
  mkPulse wbQ_regs_mod__rf_mod__write___en_(.IN_EN_WRITE(wbQ_regs_mod__rf_mod__write___en_$IN_EN_WRITE),
					    .OUT_READ(wbQ_regs_mod__rf_mod__write___en_$OUT_READ));

  // submodule wbQ_regs_mod__rf_rf
  mkRegFileLoad_ #( /*width*/ 32'd38,
		    /*n*/ 32'd1,
		    /*size*/ 32'd1,
		    /*file*/ "",
		    /*mode*/ 32'd0) wbQ_regs_mod__rf_rf(.CLK(CLK),
							.RST_N(RST_N),
							.WRITE_DATA_WRITE(wbQ_regs_mod__rf_rf$WRITE_DATA_WRITE),
							.WRITE_EN_WRITE(wbQ_regs_mod__rf_rf$WRITE_EN_WRITE),
							.READ_RESP_READ(wbQ_regs_mod__rf_rf$READ_RESP_READ));

  // submodule wbQ_regs_mod__whichReg
  mkReg #( /*width*/ 32'd1) wbQ_regs_mod__whichReg(.CLK(CLK),
						   .RST_N(RST_N),
						   .IN_EN_WRITE(wbQ_regs_mod__whichReg$IN_EN_WRITE));

  // submodule wbQ_tail
  mkReg #( /*width*/ 32'd1) wbQ_tail(.CLK(CLK),
				     .RST_N(RST_N),
				     .IN_EN_WRITE(wbQ_tail$IN_EN_WRITE));

  // rule RL_c1_1
  assign WILL_FIRE_RL_c1_1 =
	     !mod__wb___enq__en_$OUT_READ ||
	     wbQ_mod__enq___notFull___data_$OUT_READ ;

  // submodule mod__dataQ__deq__data_
  assign mod__dataQ__deq__data_$IN_EN_WRITE =
	     wbQ_mod__deq___notEmpty___data_$OUT_READ &&
	     (wbQ_mod__deq___first___data_$OUT_READ[32] ||
	      mod__dataQ__notEmpty___data_$OUT_READ) &&
	     !wbQ_mod__deq___first___data_$OUT_READ[32] ;

  // submodule mod__dataQ__first___data_
  assign mod__dataQ__first___data_$IN_WRITE = dataQ_first_WRITE ;
  assign mod__dataQ__first___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__dataQ__notEmpty___data_
  assign mod__dataQ__notEmpty___data_$IN_WRITE = dataQ_notEmpty_WRITE ;
  assign mod__dataQ__notEmpty___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__regWrite__data_
  assign mod__regWrite__data_$IN_WRITE =
	     { wbQ_mod__deq___first___data_$OUT_READ[37:33],
	       wbQ_mod__deq___first___data_$OUT_READ[32] ?
		 wbQ_mod__deq___first___data_$OUT_READ[31:0] :
		 mod__dataQ__first___data_$OUT_READ } ;
  assign mod__regWrite__data_$IN_EN_WRITE =
	     wbQ_mod__deq___notEmpty___data_$OUT_READ &&
	     (wbQ_mod__deq___first___data_$OUT_READ[32] ||
	      mod__dataQ__notEmpty___data_$OUT_READ) ;

  // submodule mod__regWrite__en_
  assign mod__regWrite__en_$IN_EN_WRITE =
	     wbQ_mod__deq___notEmpty___data_$OUT_READ &&
	     (wbQ_mod__deq___first___data_$OUT_READ[32] ||
	      mod__dataQ__notEmpty___data_$OUT_READ) ;

  // submodule mod__wbIndex__data_
  assign mod__wbIndex__data_$IN_WRITE =
	     wbQ_mod__deq___first___data_$OUT_READ[37:33] ;
  assign mod__wbIndex__data_$IN_EN_WRITE =
	     wbQ_mod__deq___notEmpty___data_$OUT_READ ;

  // submodule mod__wbIndex__en_
  assign mod__wbIndex__en_$IN_EN_WRITE =
	     wbQ_mod__deq___notEmpty___data_$OUT_READ ;

  // submodule mod__wb___enq__data_
  assign mod__wb___enq__data_$IN_WRITE = wb_enq_WRITE ;
  assign mod__wb___enq__data_$IN_EN_WRITE = wb_enq_EN_WRITE ;

  // submodule mod__wb___enq__en_
  assign mod__wb___enq__en_$IN_EN_WRITE = wb_enq_EN_WRITE ;

  // submodule mod__wb___notFull___data_
  assign mod__wb___notFull___data_$IN_WRITE =
	     wbQ_mod__enq___notFull___data_$OUT_READ ;
  assign mod__wb___notFull___data_$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_head
  assign wbQ_head$IN_EN_WRITE = wbQ_mod__enq___enq__en_$OUT_READ ;

  // submodule wbQ_mod__deq___deq__data_
  assign wbQ_mod__deq___deq__data_$IN_EN_WRITE =
	     wbQ_mod__deq___notEmpty___data_$OUT_READ &&
	     (wbQ_mod__deq___first___data_$OUT_READ[32] ||
	      mod__dataQ__notEmpty___data_$OUT_READ) ;

  // submodule wbQ_mod__deq___first___data_
  assign wbQ_mod__deq___first___data_$IN_WRITE =
	     wbQ_regs_mod__mod__read___resp___data_$OUT_READ ;
  assign wbQ_mod__deq___first___data_$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_mod__deq___notEmpty___data_
  assign wbQ_mod__deq___notEmpty___data_$IN_WRITE = wbQ_numElems$OUT_READ ;
  assign wbQ_mod__deq___notEmpty___data_$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_mod__enq___enq__data_
  assign wbQ_mod__enq___enq__data_$IN_WRITE = mod__wb___enq__data_$OUT_READ ;
  assign wbQ_mod__enq___enq__data_$IN_EN_WRITE =
	     WILL_FIRE_RL_c1_1 && mod__wb___enq__en_$OUT_READ ;

  // submodule wbQ_mod__enq___enq__en_
  assign wbQ_mod__enq___enq__en_$IN_EN_WRITE =
	     WILL_FIRE_RL_c1_1 && mod__wb___enq__en_$OUT_READ ;

  // submodule wbQ_mod__enq___notFull___data_
  assign wbQ_mod__enq___notFull___data_$IN_WRITE =
	     !wbQ_numElems$OUT_READ || wbQ_mod__deq___deq__data_$OUT_READ ;
  assign wbQ_mod__enq___notFull___data_$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_numElems
  assign wbQ_numElems$IN_WRITE =
	     wbQ_numElems$OUT_READ +
	     _0_CONCAT_wbQ_mod__enq___enq__en_OUT_READ_MINU_ETC__q1[0] ;
  assign wbQ_numElems$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_regs_mod__mod__read___req__data_
  assign wbQ_regs_mod__mod__read___req__data_$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_regs_mod__mod__read___req__en_
  assign wbQ_regs_mod__mod__read___req__en_$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_regs_mod__mod__read___resp___data_
  assign wbQ_regs_mod__mod__read___resp___data_$IN_WRITE =
	     wbQ_regs_mod__rf_mod__read___resp___data_$OUT_READ ;
  assign wbQ_regs_mod__mod__read___resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_regs_mod__mod__write___data_
  assign wbQ_regs_mod__mod__write___data_$IN_WRITE =
	     wbQ_mod__enq___enq__data_$OUT_READ ;
  assign wbQ_regs_mod__mod__write___data_$IN_EN_WRITE =
	     wbQ_mod__enq___enq__en_$OUT_READ ;

  // submodule wbQ_regs_mod__mod__write___en_
  assign wbQ_regs_mod__mod__write___en_$IN_EN_WRITE =
	     wbQ_mod__enq___enq__en_$OUT_READ ;

  // submodule wbQ_regs_mod__rf_mod__read___req__data_
  assign wbQ_regs_mod__rf_mod__read___req__data_$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_regs_mod__rf_mod__read___req__en_
  assign wbQ_regs_mod__rf_mod__read___req__en_$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_regs_mod__rf_mod__read___resp___data_
  assign wbQ_regs_mod__rf_mod__read___resp___data_$IN_WRITE =
	     wbQ_regs_mod__rf_rf$READ_RESP_READ ;
  assign wbQ_regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_regs_mod__rf_mod__write___data_
  assign wbQ_regs_mod__rf_mod__write___data_$IN_WRITE =
	     wbQ_regs_mod__mod__write___data_$OUT_READ ;
  assign wbQ_regs_mod__rf_mod__write___data_$IN_EN_WRITE =
	     wbQ_regs_mod__mod__write___en_$OUT_READ ;

  // submodule wbQ_regs_mod__rf_mod__write___en_
  assign wbQ_regs_mod__rf_mod__write___en_$IN_EN_WRITE =
	     wbQ_regs_mod__mod__write___en_$OUT_READ ;

  // submodule wbQ_regs_mod__rf_rf
  assign wbQ_regs_mod__rf_rf$WRITE_DATA_WRITE =
	     wbQ_regs_mod__rf_mod__write___data_$OUT_READ ;
  assign wbQ_regs_mod__rf_rf$WRITE_EN_WRITE =
	     wbQ_regs_mod__rf_mod__write___en_$OUT_READ ;

  // submodule wbQ_regs_mod__whichReg
  assign wbQ_regs_mod__whichReg$IN_EN_WRITE = 1'd1 ;

  // submodule wbQ_tail
  assign wbQ_tail$IN_EN_WRITE = wbQ_mod__deq___deq__data_$OUT_READ ;

  // remaining internal signals
  assign _0_CONCAT_wbQ_mod__enq___enq__en_OUT_READ_MINU_ETC__q1 =
	     { 1'd0, wbQ_mod__enq___enq__en_$OUT_READ } -
	     { 1'd0, wbQ_mod__deq___deq__data_$OUT_READ } ;
endmodule  // mkWriteback

