//
// Generated by Bluespec Compiler, version 2011.04.C (build 23804, 2011-04-18)
//
// On Wed Aug  3 12:04:19 EDT 2011
//
// Method conflict info:
// Method: enq_notFull__read
// Conflict-free: enq_notFull__read,
// 	       enq_enq_write,
// 	       deq_notEmpty__read,
// 	       deq_first__read,
// 	       deq_deq__read
//
// Method: enq_enq_write
// Conflict-free: enq_notFull__read,
// 	       deq_notEmpty__read,
// 	       deq_first__read,
// 	       deq_deq__read
// Conflicts: enq_enq_write
//
// Method: deq_notEmpty__read
// Conflict-free: enq_notFull__read,
// 	       enq_enq_write,
// 	       deq_notEmpty__read,
// 	       deq_first__read,
// 	       deq_deq__read
//
// Method: deq_first__read
// Conflict-free: enq_notFull__read,
// 	       enq_enq_write,
// 	       deq_notEmpty__read,
// 	       deq_first__read,
// 	       deq_deq__read
//
// Method: deq_deq__read
// Conflict-free: enq_notFull__read,
// 	       enq_enq_write,
// 	       deq_notEmpty__read,
// 	       deq_first__read
// Conflicts: deq_deq__read
//
//
// Ports:
// Name                         I/O  size props
// enq_notFull_READ               O     1
// deq_notEmpty_READ              O     1
// deq_first_READ                 O    65
// CLK                            I     1 clock
// RST_N                          I     1 reset
// enq_enq_WRITE                  I    65
// enq_enq_EN_WRITE               I     1
// deq_deq_WRITE                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkDataReqQ(CLK,
		  RST_N,

		  enq_notFull_READ,

		  enq_enq_WRITE,
		  enq_enq_EN_WRITE,

		  deq_notEmpty_READ,

		  deq_first_READ,

		  deq_deq_WRITE);
  input  CLK;
  input  RST_N;

  // value method enq_notFull__read
  output enq_notFull_READ;

  // action method enq_enq_write
  input  [64 : 0] enq_enq_WRITE;
  input  enq_enq_EN_WRITE;

  // value method deq_notEmpty__read
  output deq_notEmpty_READ;

  // value method deq_first__read
  output [64 : 0] deq_first_READ;

  // action method deq_deq__read
  input  deq_deq_WRITE;

  // signals for module outputs
  wire [64 : 0] deq_first_READ;
  wire deq_notEmpty_READ, enq_notFull_READ;

  // ports of submodule mod__head
  wire mod__head$IN_EN_WRITE;

  // ports of submodule mod__mod__deq___deq__data_
  wire mod__mod__deq___deq__data_$IN_EN_WRITE,
       mod__mod__deq___deq__data_$OUT_READ;

  // ports of submodule mod__mod__deq___first___data_
  wire [64 : 0] mod__mod__deq___first___data_$IN_WRITE,
		mod__mod__deq___first___data_$OUT_READ;
  wire mod__mod__deq___first___data_$IN_EN_WRITE;

  // ports of submodule mod__mod__deq___notEmpty___data_
  wire mod__mod__deq___notEmpty___data_$IN_EN_WRITE,
       mod__mod__deq___notEmpty___data_$IN_WRITE,
       mod__mod__deq___notEmpty___data_$OUT_READ;

  // ports of submodule mod__mod__enq___enq__data_
  wire [64 : 0] mod__mod__enq___enq__data_$IN_WRITE,
		mod__mod__enq___enq__data_$OUT_READ;
  wire mod__mod__enq___enq__data_$IN_EN_WRITE;

  // ports of submodule mod__mod__enq___enq__en_
  wire mod__mod__enq___enq__en_$IN_EN_WRITE,
       mod__mod__enq___enq__en_$OUT_READ;

  // ports of submodule mod__mod__enq___notFull___data_
  wire mod__mod__enq___notFull___data_$IN_EN_WRITE,
       mod__mod__enq___notFull___data_$IN_WRITE,
       mod__mod__enq___notFull___data_$OUT_READ;

  // ports of submodule mod__numElems
  wire mod__numElems$IN_EN_WRITE,
       mod__numElems$IN_WRITE,
       mod__numElems$OUT_READ;

  // ports of submodule mod__regs_mod__mod__read___req__data_
  wire mod__regs_mod__mod__read___req__data_$IN_EN_WRITE;

  // ports of submodule mod__regs_mod__mod__read___req__en_
  wire mod__regs_mod__mod__read___req__en_$IN_EN_WRITE;

  // ports of submodule mod__regs_mod__mod__read___resp___data_
  wire [64 : 0] mod__regs_mod__mod__read___resp___data_$IN_WRITE,
		mod__regs_mod__mod__read___resp___data_$OUT_READ;
  wire mod__regs_mod__mod__read___resp___data_$IN_EN_WRITE;

  // ports of submodule mod__regs_mod__mod__write___data_
  wire [64 : 0] mod__regs_mod__mod__write___data_$IN_WRITE,
		mod__regs_mod__mod__write___data_$OUT_READ;
  wire mod__regs_mod__mod__write___data_$IN_EN_WRITE;

  // ports of submodule mod__regs_mod__mod__write___en_
  wire mod__regs_mod__mod__write___en_$IN_EN_WRITE,
       mod__regs_mod__mod__write___en_$OUT_READ;

  // ports of submodule mod__regs_mod__rf_mod__read___req__data_
  wire mod__regs_mod__rf_mod__read___req__data_$IN_EN_WRITE;

  // ports of submodule mod__regs_mod__rf_mod__read___req__en_
  wire mod__regs_mod__rf_mod__read___req__en_$IN_EN_WRITE;

  // ports of submodule mod__regs_mod__rf_mod__read___resp___data_
  wire [64 : 0] mod__regs_mod__rf_mod__read___resp___data_$IN_WRITE,
		mod__regs_mod__rf_mod__read___resp___data_$OUT_READ;
  wire mod__regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE;

  // ports of submodule mod__regs_mod__rf_mod__write___data_
  wire [64 : 0] mod__regs_mod__rf_mod__write___data_$IN_WRITE,
		mod__regs_mod__rf_mod__write___data_$OUT_READ;
  wire mod__regs_mod__rf_mod__write___data_$IN_EN_WRITE;

  // ports of submodule mod__regs_mod__rf_mod__write___en_
  wire mod__regs_mod__rf_mod__write___en_$IN_EN_WRITE,
       mod__regs_mod__rf_mod__write___en_$OUT_READ;

  // ports of submodule mod__regs_mod__rf_rf
  wire [64 : 0] mod__regs_mod__rf_rf$READ_RESP_READ,
		mod__regs_mod__rf_rf$WRITE_DATA_WRITE;
  wire mod__regs_mod__rf_rf$WRITE_EN_WRITE;

  // ports of submodule mod__regs_mod__whichReg
  wire mod__regs_mod__whichReg$IN_EN_WRITE;

  // ports of submodule mod__tail
  wire mod__tail$IN_EN_WRITE;

  // remaining internal signals
  wire [1 : 0] _0_CONCAT_mod__mod__enq___enq__en_OUT_READ_MIN_ETC__q1;

  // value method enq_notFull__read
  assign enq_notFull_READ = mod__mod__enq___notFull___data_$OUT_READ ;

  // value method deq_notEmpty__read
  assign deq_notEmpty_READ = mod__mod__deq___notEmpty___data_$OUT_READ ;

  // value method deq_first__read
  assign deq_first_READ = mod__mod__deq___first___data_$OUT_READ ;

  // submodule mod__head
  mkReg #( /*width*/ 32'd1) mod__head(.CLK(CLK),
				      .RST_N(RST_N),
				      .IN_EN_WRITE(mod__head$IN_EN_WRITE));

  // submodule mod__mod__deq___deq__data_
  mkPulse mod__mod__deq___deq__data_(.IN_EN_WRITE(mod__mod__deq___deq__data_$IN_EN_WRITE),
				     .OUT_READ(mod__mod__deq___deq__data_$OUT_READ));

  // submodule mod__mod__deq___first___data_
  mkWire #( /*width*/ 32'd65) mod__mod__deq___first___data_(.IN_WRITE(mod__mod__deq___first___data_$IN_WRITE),
							    .IN_EN_WRITE(mod__mod__deq___first___data_$IN_EN_WRITE),
							    .OUT_READ(mod__mod__deq___first___data_$OUT_READ));

  // submodule mod__mod__deq___notEmpty___data_
  mkWire #( /*width*/ 32'd1) mod__mod__deq___notEmpty___data_(.IN_WRITE(mod__mod__deq___notEmpty___data_$IN_WRITE),
							      .IN_EN_WRITE(mod__mod__deq___notEmpty___data_$IN_EN_WRITE),
							      .OUT_READ(mod__mod__deq___notEmpty___data_$OUT_READ));

  // submodule mod__mod__enq___enq__data_
  mkWire #( /*width*/ 32'd65) mod__mod__enq___enq__data_(.IN_WRITE(mod__mod__enq___enq__data_$IN_WRITE),
							 .IN_EN_WRITE(mod__mod__enq___enq__data_$IN_EN_WRITE),
							 .OUT_READ(mod__mod__enq___enq__data_$OUT_READ));

  // submodule mod__mod__enq___enq__en_
  mkPulse mod__mod__enq___enq__en_(.IN_EN_WRITE(mod__mod__enq___enq__en_$IN_EN_WRITE),
				   .OUT_READ(mod__mod__enq___enq__en_$OUT_READ));

  // submodule mod__mod__enq___notFull___data_
  mkWire #( /*width*/ 32'd1) mod__mod__enq___notFull___data_(.IN_WRITE(mod__mod__enq___notFull___data_$IN_WRITE),
							     .IN_EN_WRITE(mod__mod__enq___notFull___data_$IN_EN_WRITE),
							     .OUT_READ(mod__mod__enq___notFull___data_$OUT_READ));

  // submodule mod__numElems
  mkReg #( /*width*/ 32'd1,  /*init*/ 1'd0) mod__numElems(.CLK(CLK),
							  .RST_N(RST_N),
							  .IN_WRITE(mod__numElems$IN_WRITE),
							  .IN_EN_WRITE(mod__numElems$IN_EN_WRITE),
							  .OUT_READ(mod__numElems$OUT_READ));

  // submodule mod__regs_mod__mod__read___req__data_
  mkWire #( /*width*/ 32'd1) mod__regs_mod__mod__read___req__data_(.IN_EN_WRITE(mod__regs_mod__mod__read___req__data_$IN_EN_WRITE));

  // submodule mod__regs_mod__mod__read___req__en_
  mkPulse mod__regs_mod__mod__read___req__en_(.IN_EN_WRITE(mod__regs_mod__mod__read___req__en_$IN_EN_WRITE),
					      .OUT_READ());

  // submodule mod__regs_mod__mod__read___resp___data_
  mkWire #( /*width*/ 32'd65) mod__regs_mod__mod__read___resp___data_(.IN_WRITE(mod__regs_mod__mod__read___resp___data_$IN_WRITE),
								      .IN_EN_WRITE(mod__regs_mod__mod__read___resp___data_$IN_EN_WRITE),
								      .OUT_READ(mod__regs_mod__mod__read___resp___data_$OUT_READ));

  // submodule mod__regs_mod__mod__write___data_
  mkWire #( /*width*/ 32'd65) mod__regs_mod__mod__write___data_(.IN_WRITE(mod__regs_mod__mod__write___data_$IN_WRITE),
								.IN_EN_WRITE(mod__regs_mod__mod__write___data_$IN_EN_WRITE),
								.OUT_READ(mod__regs_mod__mod__write___data_$OUT_READ));

  // submodule mod__regs_mod__mod__write___en_
  mkPulse mod__regs_mod__mod__write___en_(.IN_EN_WRITE(mod__regs_mod__mod__write___en_$IN_EN_WRITE),
					  .OUT_READ(mod__regs_mod__mod__write___en_$OUT_READ));

  // submodule mod__regs_mod__rf_mod__read___req__data_
  mkWire #( /*width*/ 32'd1) mod__regs_mod__rf_mod__read___req__data_(.IN_EN_WRITE(mod__regs_mod__rf_mod__read___req__data_$IN_EN_WRITE));

  // submodule mod__regs_mod__rf_mod__read___req__en_
  mkPulse mod__regs_mod__rf_mod__read___req__en_(.IN_EN_WRITE(mod__regs_mod__rf_mod__read___req__en_$IN_EN_WRITE),
						 .OUT_READ());

  // submodule mod__regs_mod__rf_mod__read___resp___data_
  mkWire #( /*width*/ 32'd65) mod__regs_mod__rf_mod__read___resp___data_(.IN_WRITE(mod__regs_mod__rf_mod__read___resp___data_$IN_WRITE),
									 .IN_EN_WRITE(mod__regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE),
									 .OUT_READ(mod__regs_mod__rf_mod__read___resp___data_$OUT_READ));

  // submodule mod__regs_mod__rf_mod__write___data_
  mkWire #( /*width*/ 32'd65) mod__regs_mod__rf_mod__write___data_(.IN_WRITE(mod__regs_mod__rf_mod__write___data_$IN_WRITE),
								   .IN_EN_WRITE(mod__regs_mod__rf_mod__write___data_$IN_EN_WRITE),
								   .OUT_READ(mod__regs_mod__rf_mod__write___data_$OUT_READ));

  // submodule mod__regs_mod__rf_mod__write___en_
  mkPulse mod__regs_mod__rf_mod__write___en_(.IN_EN_WRITE(mod__regs_mod__rf_mod__write___en_$IN_EN_WRITE),
					     .OUT_READ(mod__regs_mod__rf_mod__write___en_$OUT_READ));

  // submodule mod__regs_mod__rf_rf
  mkRegFileLoad_ #( /*width*/ 32'd65,
		    /*n*/ 32'd1,
		    /*size*/ 32'd1,
		    /*file*/ "",
		    /*mode*/ 32'd0) mod__regs_mod__rf_rf(.CLK(CLK),
							 .RST_N(RST_N),
							 .WRITE_DATA_WRITE(mod__regs_mod__rf_rf$WRITE_DATA_WRITE),
							 .WRITE_EN_WRITE(mod__regs_mod__rf_rf$WRITE_EN_WRITE),
							 .READ_RESP_READ(mod__regs_mod__rf_rf$READ_RESP_READ));

  // submodule mod__regs_mod__whichReg
  mkReg #( /*width*/ 32'd1) mod__regs_mod__whichReg(.CLK(CLK),
						    .RST_N(RST_N),
						    .IN_EN_WRITE(mod__regs_mod__whichReg$IN_EN_WRITE));

  // submodule mod__tail
  mkReg #( /*width*/ 32'd1) mod__tail(.CLK(CLK),
				      .RST_N(RST_N),
				      .IN_EN_WRITE(mod__tail$IN_EN_WRITE));

  // submodule mod__head
  assign mod__head$IN_EN_WRITE = mod__mod__enq___enq__en_$OUT_READ ;

  // submodule mod__mod__deq___deq__data_
  assign mod__mod__deq___deq__data_$IN_EN_WRITE = deq_deq_WRITE ;

  // submodule mod__mod__deq___first___data_
  assign mod__mod__deq___first___data_$IN_WRITE =
	     mod__regs_mod__mod__read___resp___data_$OUT_READ ;
  assign mod__mod__deq___first___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__mod__deq___notEmpty___data_
  assign mod__mod__deq___notEmpty___data_$IN_WRITE = mod__numElems$OUT_READ ;
  assign mod__mod__deq___notEmpty___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__mod__enq___enq__data_
  assign mod__mod__enq___enq__data_$IN_WRITE = enq_enq_WRITE ;
  assign mod__mod__enq___enq__data_$IN_EN_WRITE = enq_enq_EN_WRITE ;

  // submodule mod__mod__enq___enq__en_
  assign mod__mod__enq___enq__en_$IN_EN_WRITE = enq_enq_EN_WRITE ;

  // submodule mod__mod__enq___notFull___data_
  assign mod__mod__enq___notFull___data_$IN_WRITE =
	     !mod__numElems$OUT_READ || mod__mod__deq___deq__data_$OUT_READ ;
  assign mod__mod__enq___notFull___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__numElems
  assign mod__numElems$IN_WRITE =
	     mod__numElems$OUT_READ +
	     _0_CONCAT_mod__mod__enq___enq__en_OUT_READ_MIN_ETC__q1[0] ;
  assign mod__numElems$IN_EN_WRITE = 1'd1 ;

  // submodule mod__regs_mod__mod__read___req__data_
  assign mod__regs_mod__mod__read___req__data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__regs_mod__mod__read___req__en_
  assign mod__regs_mod__mod__read___req__en_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__regs_mod__mod__read___resp___data_
  assign mod__regs_mod__mod__read___resp___data_$IN_WRITE =
	     mod__regs_mod__rf_mod__read___resp___data_$OUT_READ ;
  assign mod__regs_mod__mod__read___resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__regs_mod__mod__write___data_
  assign mod__regs_mod__mod__write___data_$IN_WRITE =
	     mod__mod__enq___enq__data_$OUT_READ ;
  assign mod__regs_mod__mod__write___data_$IN_EN_WRITE =
	     mod__mod__enq___enq__en_$OUT_READ ;

  // submodule mod__regs_mod__mod__write___en_
  assign mod__regs_mod__mod__write___en_$IN_EN_WRITE =
	     mod__mod__enq___enq__en_$OUT_READ ;

  // submodule mod__regs_mod__rf_mod__read___req__data_
  assign mod__regs_mod__rf_mod__read___req__data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__regs_mod__rf_mod__read___req__en_
  assign mod__regs_mod__rf_mod__read___req__en_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__regs_mod__rf_mod__read___resp___data_
  assign mod__regs_mod__rf_mod__read___resp___data_$IN_WRITE =
	     mod__regs_mod__rf_rf$READ_RESP_READ ;
  assign mod__regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__regs_mod__rf_mod__write___data_
  assign mod__regs_mod__rf_mod__write___data_$IN_WRITE =
	     mod__regs_mod__mod__write___data_$OUT_READ ;
  assign mod__regs_mod__rf_mod__write___data_$IN_EN_WRITE =
	     mod__regs_mod__mod__write___en_$OUT_READ ;

  // submodule mod__regs_mod__rf_mod__write___en_
  assign mod__regs_mod__rf_mod__write___en_$IN_EN_WRITE =
	     mod__regs_mod__mod__write___en_$OUT_READ ;

  // submodule mod__regs_mod__rf_rf
  assign mod__regs_mod__rf_rf$WRITE_DATA_WRITE =
	     mod__regs_mod__rf_mod__write___data_$OUT_READ ;
  assign mod__regs_mod__rf_rf$WRITE_EN_WRITE =
	     mod__regs_mod__rf_mod__write___en_$OUT_READ ;

  // submodule mod__regs_mod__whichReg
  assign mod__regs_mod__whichReg$IN_EN_WRITE = 1'd1 ;

  // submodule mod__tail
  assign mod__tail$IN_EN_WRITE = mod__mod__deq___deq__data_$OUT_READ ;

  // remaining internal signals
  assign _0_CONCAT_mod__mod__enq___enq__en_OUT_READ_MIN_ETC__q1 =
	     { 1'd0, mod__mod__enq___enq__en_$OUT_READ } -
	     { 1'd0, mod__mod__deq___deq__data_$OUT_READ } ;
endmodule  // mkDataReqQ

