//
// Generated by Bluespec Compiler, version 2011.04.C (build 23804, 2011-04-18)
//
// On Wed Aug  3 12:04:12 EDT 2011
//
// Method conflict info:
// Method: instReqQ_notEmpty_write
// Conflict-free: instReqQ_first_write,
// 	       instReqQ_deq__read,
// 	       instQ_notFull_write,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_notEmpty_write,
// 	       dataReqQ_first_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_notFull_write,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
// Conflicts: instReqQ_notEmpty_write
//
// Method: instReqQ_first_write
// Conflict-free: instReqQ_notEmpty_write,
// 	       instReqQ_deq__read,
// 	       instQ_notFull_write,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_notEmpty_write,
// 	       dataReqQ_first_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_notFull_write,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
// Conflicts: instReqQ_first_write
//
// Method: instReqQ_deq__read
// Conflict-free: instReqQ_notEmpty_write,
// 	       instReqQ_first_write,
// 	       instReqQ_deq__read,
// 	       instQ_notFull_write,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_notEmpty_write,
// 	       dataReqQ_first_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_notFull_write,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
//
// Method: instQ_notFull_write
// Conflict-free: instReqQ_notEmpty_write,
// 	       instReqQ_first_write,
// 	       instReqQ_deq__read,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_notEmpty_write,
// 	       dataReqQ_first_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_notFull_write,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
// Conflicts: instQ_notFull_write
//
// Method: instQ_enq__read
// Conflict-free: instReqQ_notEmpty_write,
// 	       instReqQ_first_write,
// 	       instReqQ_deq__read,
// 	       instQ_notFull_write,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_notEmpty_write,
// 	       dataReqQ_first_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_notFull_write,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
//
// Method: instQ_enq_en
// Conflict-free: instReqQ_notEmpty_write,
// 	       instReqQ_first_write,
// 	       instReqQ_deq__read,
// 	       instQ_notFull_write,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_notEmpty_write,
// 	       dataReqQ_first_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_notFull_write,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
//
// Method: dataReqQ_notEmpty_write
// Conflict-free: instReqQ_notEmpty_write,
// 	       instReqQ_first_write,
// 	       instReqQ_deq__read,
// 	       instQ_notFull_write,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_first_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_notFull_write,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
// Conflicts: dataReqQ_notEmpty_write
//
// Method: dataReqQ_first_write
// Conflict-free: instReqQ_notEmpty_write,
// 	       instReqQ_first_write,
// 	       instReqQ_deq__read,
// 	       instQ_notFull_write,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_notEmpty_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_notFull_write,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
// Conflicts: dataReqQ_first_write
//
// Method: dataReqQ_deq__read
// Conflict-free: instReqQ_notEmpty_write,
// 	       instReqQ_first_write,
// 	       instReqQ_deq__read,
// 	       instQ_notFull_write,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_notEmpty_write,
// 	       dataReqQ_first_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_notFull_write,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
//
// Method: dataQ_notFull_write
// Conflict-free: instReqQ_notEmpty_write,
// 	       instReqQ_first_write,
// 	       instReqQ_deq__read,
// 	       instQ_notFull_write,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_notEmpty_write,
// 	       dataReqQ_first_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
// Conflicts: dataQ_notFull_write
//
// Method: dataQ_enq__read
// Conflict-free: instReqQ_notEmpty_write,
// 	       instReqQ_first_write,
// 	       instReqQ_deq__read,
// 	       instQ_notFull_write,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_notEmpty_write,
// 	       dataReqQ_first_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_notFull_write,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
//
// Method: dataQ_enq_en
// Conflict-free: instReqQ_notEmpty_write,
// 	       instReqQ_first_write,
// 	       instReqQ_deq__read,
// 	       instQ_notFull_write,
// 	       instQ_enq__read,
// 	       instQ_enq_en,
// 	       dataReqQ_notEmpty_write,
// 	       dataReqQ_first_write,
// 	       dataReqQ_deq__read,
// 	       dataQ_notFull_write,
// 	       dataQ_enq__read,
// 	       dataQ_enq_en
//
//
// Ports:
// Name                         I/O  size props
// instReqQ_deq_READ              O     1
// instQ_enq_READ                 O    32
// instQ_enq_EN_READ              O     1
// dataReqQ_deq_READ              O     1
// dataQ_enq_READ                 O    32
// dataQ_enq_EN_READ              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// instReqQ_notEmpty_WRITE        I     1
// instReqQ_first_WRITE           I    32
// instQ_notFull_WRITE            I     1
// dataReqQ_notEmpty_WRITE        I     1
// dataReqQ_first_WRITE           I    65
// dataQ_notFull_WRITE            I     1
//
// Combinational paths from inputs to outputs:
//   (instReqQ_notEmpty_WRITE,
//    instReqQ_first_WRITE,
//    instQ_notFull_WRITE) -> instQ_enq_READ
//   (dataReqQ_notEmpty_WRITE,
//    dataReqQ_first_WRITE,
//    dataQ_notFull_WRITE) -> dataQ_enq_READ
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkMemory(CLK,
		RST_N,

		instReqQ_notEmpty_WRITE,

		instReqQ_first_WRITE,

		instReqQ_deq_READ,

		instQ_notFull_WRITE,

		instQ_enq_READ,

		instQ_enq_EN_READ,

		dataReqQ_notEmpty_WRITE,

		dataReqQ_first_WRITE,

		dataReqQ_deq_READ,

		dataQ_notFull_WRITE,

		dataQ_enq_READ,

		dataQ_enq_EN_READ);
  input  CLK;
  input  RST_N;

  // action method instReqQ_notEmpty_write
  input  instReqQ_notEmpty_WRITE;

  // action method instReqQ_first_write
  input  [31 : 0] instReqQ_first_WRITE;

  // value method instReqQ_deq__read
  output instReqQ_deq_READ;

  // action method instQ_notFull_write
  input  instQ_notFull_WRITE;

  // value method instQ_enq__read
  output [31 : 0] instQ_enq_READ;

  // value method instQ_enq_en
  output instQ_enq_EN_READ;

  // action method dataReqQ_notEmpty_write
  input  dataReqQ_notEmpty_WRITE;

  // action method dataReqQ_first_write
  input  [64 : 0] dataReqQ_first_WRITE;

  // value method dataReqQ_deq__read
  output dataReqQ_deq_READ;

  // action method dataQ_notFull_write
  input  dataQ_notFull_WRITE;

  // value method dataQ_enq__read
  output [31 : 0] dataQ_enq_READ;

  // value method dataQ_enq_en
  output dataQ_enq_EN_READ;

  // signals for module outputs
  wire [31 : 0] dataQ_enq_READ, instQ_enq_READ;
  wire dataQ_enq_EN_READ,
       dataReqQ_deq_READ,
       instQ_enq_EN_READ,
       instReqQ_deq_READ;

  // ports of submodule mod__dataQ__enq__data_
  wire [31 : 0] mod__dataQ__enq__data_$IN_WRITE,
		mod__dataQ__enq__data_$OUT_READ;
  wire mod__dataQ__enq__data_$IN_EN_WRITE;

  // ports of submodule mod__dataQ__enq__en_
  wire mod__dataQ__enq__en_$IN_EN_WRITE, mod__dataQ__enq__en_$OUT_READ;

  // ports of submodule mod__dataQ__notFull___data_
  wire mod__dataQ__notFull___data_$IN_EN_WRITE,
       mod__dataQ__notFull___data_$IN_WRITE,
       mod__dataQ__notFull___data_$OUT_READ;

  // ports of submodule mod__dataReqQ__deq__data_
  wire mod__dataReqQ__deq__data_$IN_EN_WRITE,
       mod__dataReqQ__deq__data_$OUT_READ;

  // ports of submodule mod__dataReqQ__first___data_
  wire [64 : 0] mod__dataReqQ__first___data_$IN_WRITE,
		mod__dataReqQ__first___data_$OUT_READ;
  wire mod__dataReqQ__first___data_$IN_EN_WRITE;

  // ports of submodule mod__dataReqQ__notEmpty___data_
  wire mod__dataReqQ__notEmpty___data_$IN_EN_WRITE,
       mod__dataReqQ__notEmpty___data_$IN_WRITE,
       mod__dataReqQ__notEmpty___data_$OUT_READ;

  // ports of submodule mod__instQ__enq__data_
  wire [31 : 0] mod__instQ__enq__data_$IN_WRITE,
		mod__instQ__enq__data_$OUT_READ;
  wire mod__instQ__enq__data_$IN_EN_WRITE;

  // ports of submodule mod__instQ__enq__en_
  wire mod__instQ__enq__en_$IN_EN_WRITE, mod__instQ__enq__en_$OUT_READ;

  // ports of submodule mod__instQ__notFull___data_
  wire mod__instQ__notFull___data_$IN_EN_WRITE,
       mod__instQ__notFull___data_$IN_WRITE,
       mod__instQ__notFull___data_$OUT_READ;

  // ports of submodule mod__instReqQ__deq__data_
  wire mod__instReqQ__deq__data_$IN_EN_WRITE,
       mod__instReqQ__deq__data_$OUT_READ;

  // ports of submodule mod__instReqQ__first___data_
  wire [31 : 0] mod__instReqQ__first___data_$IN_WRITE,
		mod__instReqQ__first___data_$OUT_READ;
  wire mod__instReqQ__first___data_$IN_EN_WRITE;

  // ports of submodule mod__instReqQ__notEmpty___data_
  wire mod__instReqQ__notEmpty___data_$IN_EN_WRITE,
       mod__instReqQ__notEmpty___data_$IN_WRITE,
       mod__instReqQ__notEmpty___data_$OUT_READ;

  // ports of submodule regs_mod__mod__read___req__1_data_
  wire [19 : 0] regs_mod__mod__read___req__1_data_$IN_WRITE,
		regs_mod__mod__read___req__1_data_$OUT_READ;
  wire regs_mod__mod__read___req__1_data_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__read___req__1_en_
  wire regs_mod__mod__read___req__1_en_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__read___req__data_
  wire [19 : 0] regs_mod__mod__read___req__data_$IN_WRITE,
		regs_mod__mod__read___req__data_$OUT_READ;
  wire regs_mod__mod__read___req__data_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__read___req__en_
  wire regs_mod__mod__read___req__en_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__read___resp___1_data_
  wire [31 : 0] regs_mod__mod__read___resp___1_data_$IN_WRITE,
		regs_mod__mod__read___resp___1_data_$OUT_READ;
  wire regs_mod__mod__read___resp___1_data_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__read___resp___data_
  wire [31 : 0] regs_mod__mod__read___resp___data_$IN_WRITE,
		regs_mod__mod__read___resp___data_$OUT_READ;
  wire regs_mod__mod__read___resp___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__write___data_
  wire [51 : 0] regs_mod__mod__write___data_$IN_WRITE,
		regs_mod__mod__write___data_$OUT_READ;
  wire regs_mod__mod__write___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__mod__write___en_
  wire regs_mod__mod__write___en_$IN_EN_WRITE,
       regs_mod__mod__write___en_$OUT_READ;

  // ports of submodule regs_mod__rf_mod__1_read___req__data_
  wire [19 : 0] regs_mod__rf_mod__1_read___req__data_$IN_WRITE,
		regs_mod__rf_mod__1_read___req__data_$OUT_READ;
  wire regs_mod__rf_mod__1_read___req__data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__1_read___req__en_
  wire regs_mod__rf_mod__1_read___req__en_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__1_read___resp___data_
  wire [31 : 0] regs_mod__rf_mod__1_read___resp___data_$IN_WRITE,
		regs_mod__rf_mod__1_read___resp___data_$OUT_READ;
  wire regs_mod__rf_mod__1_read___resp___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__1_write___data_
  wire [51 : 0] regs_mod__rf_mod__1_write___data_$IN_WRITE,
		regs_mod__rf_mod__1_write___data_$OUT_READ;
  wire regs_mod__rf_mod__1_write___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__1_write___en_
  wire regs_mod__rf_mod__1_write___en_$IN_EN_WRITE,
       regs_mod__rf_mod__1_write___en_$OUT_READ;

  // ports of submodule regs_mod__rf_mod__read___req__data_
  wire [19 : 0] regs_mod__rf_mod__read___req__data_$IN_WRITE,
		regs_mod__rf_mod__read___req__data_$OUT_READ;
  wire regs_mod__rf_mod__read___req__data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__read___req__en_
  wire regs_mod__rf_mod__read___req__en_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__read___resp___data_
  wire [31 : 0] regs_mod__rf_mod__read___resp___data_$IN_WRITE,
		regs_mod__rf_mod__read___resp___data_$OUT_READ;
  wire regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__write___data_
  wire [51 : 0] regs_mod__rf_mod__write___data_$IN_WRITE,
		regs_mod__rf_mod__write___data_$OUT_READ;
  wire regs_mod__rf_mod__write___data_$IN_EN_WRITE;

  // ports of submodule regs_mod__rf_mod__write___en_
  wire regs_mod__rf_mod__write___en_$IN_EN_WRITE,
       regs_mod__rf_mod__write___en_$OUT_READ;

  // ports of submodule regs_mod__rf_rf
  wire [31 : 0] regs_mod__rf_rf$READ_RESP_READ,
		regs_mod__rf_rf$WRITE_DATA_WRITE;
  wire [19 : 0] regs_mod__rf_rf$READ_REQ_WRITE,
		regs_mod__rf_rf$WRITE_INDEX_WRITE;
  wire regs_mod__rf_rf$WRITE_EN_WRITE;

  // ports of submodule regs_mod__rf_rf_1
  wire [31 : 0] regs_mod__rf_rf_1$READ_RESP_READ,
		regs_mod__rf_rf_1$WRITE_DATA_WRITE;
  wire [19 : 0] regs_mod__rf_rf_1$READ_REQ_WRITE,
		regs_mod__rf_rf_1$WRITE_INDEX_WRITE;
  wire regs_mod__rf_rf_1$WRITE_EN_WRITE;

  // ports of submodule regs_mod__whichReg
  wire regs_mod__whichReg$IN_EN_WRITE;

  // rule scheduling signals
  wire WILL_FIRE_RL_r2;

  // value method instReqQ_deq__read
  assign instReqQ_deq_READ = mod__instReqQ__deq__data_$OUT_READ ;

  // value method instQ_enq__read
  assign instQ_enq_READ = mod__instQ__enq__data_$OUT_READ ;

  // value method instQ_enq_en
  assign instQ_enq_EN_READ = mod__instQ__enq__en_$OUT_READ ;

  // value method dataReqQ_deq__read
  assign dataReqQ_deq_READ = mod__dataReqQ__deq__data_$OUT_READ ;

  // value method dataQ_enq__read
  assign dataQ_enq_READ = mod__dataQ__enq__data_$OUT_READ ;

  // value method dataQ_enq_en
  assign dataQ_enq_EN_READ = mod__dataQ__enq__en_$OUT_READ ;

  // submodule mod__dataQ__enq__data_
  mkWire #( /*width*/ 32'd32) mod__dataQ__enq__data_(.IN_WRITE(mod__dataQ__enq__data_$IN_WRITE),
						     .IN_EN_WRITE(mod__dataQ__enq__data_$IN_EN_WRITE),
						     .OUT_READ(mod__dataQ__enq__data_$OUT_READ));

  // submodule mod__dataQ__enq__en_
  mkPulse mod__dataQ__enq__en_(.IN_EN_WRITE(mod__dataQ__enq__en_$IN_EN_WRITE),
			       .OUT_READ(mod__dataQ__enq__en_$OUT_READ));

  // submodule mod__dataQ__notFull___data_
  mkWire #( /*width*/ 32'd1) mod__dataQ__notFull___data_(.IN_WRITE(mod__dataQ__notFull___data_$IN_WRITE),
							 .IN_EN_WRITE(mod__dataQ__notFull___data_$IN_EN_WRITE),
							 .OUT_READ(mod__dataQ__notFull___data_$OUT_READ));

  // submodule mod__dataReqQ__deq__data_
  mkPulse mod__dataReqQ__deq__data_(.IN_EN_WRITE(mod__dataReqQ__deq__data_$IN_EN_WRITE),
				    .OUT_READ(mod__dataReqQ__deq__data_$OUT_READ));

  // submodule mod__dataReqQ__first___data_
  mkWire #( /*width*/ 32'd65) mod__dataReqQ__first___data_(.IN_WRITE(mod__dataReqQ__first___data_$IN_WRITE),
							   .IN_EN_WRITE(mod__dataReqQ__first___data_$IN_EN_WRITE),
							   .OUT_READ(mod__dataReqQ__first___data_$OUT_READ));

  // submodule mod__dataReqQ__notEmpty___data_
  mkWire #( /*width*/ 32'd1) mod__dataReqQ__notEmpty___data_(.IN_WRITE(mod__dataReqQ__notEmpty___data_$IN_WRITE),
							     .IN_EN_WRITE(mod__dataReqQ__notEmpty___data_$IN_EN_WRITE),
							     .OUT_READ(mod__dataReqQ__notEmpty___data_$OUT_READ));

  // submodule mod__instQ__enq__data_
  mkWire #( /*width*/ 32'd32) mod__instQ__enq__data_(.IN_WRITE(mod__instQ__enq__data_$IN_WRITE),
						     .IN_EN_WRITE(mod__instQ__enq__data_$IN_EN_WRITE),
						     .OUT_READ(mod__instQ__enq__data_$OUT_READ));

  // submodule mod__instQ__enq__en_
  mkPulse mod__instQ__enq__en_(.IN_EN_WRITE(mod__instQ__enq__en_$IN_EN_WRITE),
			       .OUT_READ(mod__instQ__enq__en_$OUT_READ));

  // submodule mod__instQ__notFull___data_
  mkWire #( /*width*/ 32'd1) mod__instQ__notFull___data_(.IN_WRITE(mod__instQ__notFull___data_$IN_WRITE),
							 .IN_EN_WRITE(mod__instQ__notFull___data_$IN_EN_WRITE),
							 .OUT_READ(mod__instQ__notFull___data_$OUT_READ));

  // submodule mod__instReqQ__deq__data_
  mkPulse mod__instReqQ__deq__data_(.IN_EN_WRITE(mod__instReqQ__deq__data_$IN_EN_WRITE),
				    .OUT_READ(mod__instReqQ__deq__data_$OUT_READ));

  // submodule mod__instReqQ__first___data_
  mkWire #( /*width*/ 32'd32) mod__instReqQ__first___data_(.IN_WRITE(mod__instReqQ__first___data_$IN_WRITE),
							   .IN_EN_WRITE(mod__instReqQ__first___data_$IN_EN_WRITE),
							   .OUT_READ(mod__instReqQ__first___data_$OUT_READ));

  // submodule mod__instReqQ__notEmpty___data_
  mkWire #( /*width*/ 32'd1) mod__instReqQ__notEmpty___data_(.IN_WRITE(mod__instReqQ__notEmpty___data_$IN_WRITE),
							     .IN_EN_WRITE(mod__instReqQ__notEmpty___data_$IN_EN_WRITE),
							     .OUT_READ(mod__instReqQ__notEmpty___data_$OUT_READ));

  // submodule regs_mod__mod__read___req__1_data_
  mkWire #( /*width*/ 32'd20) regs_mod__mod__read___req__1_data_(.IN_WRITE(regs_mod__mod__read___req__1_data_$IN_WRITE),
								 .IN_EN_WRITE(regs_mod__mod__read___req__1_data_$IN_EN_WRITE),
								 .OUT_READ(regs_mod__mod__read___req__1_data_$OUT_READ));

  // submodule regs_mod__mod__read___req__1_en_
  mkPulse regs_mod__mod__read___req__1_en_(.IN_EN_WRITE(regs_mod__mod__read___req__1_en_$IN_EN_WRITE),
					   .OUT_READ());

  // submodule regs_mod__mod__read___req__data_
  mkWire #( /*width*/ 32'd20) regs_mod__mod__read___req__data_(.IN_WRITE(regs_mod__mod__read___req__data_$IN_WRITE),
							       .IN_EN_WRITE(regs_mod__mod__read___req__data_$IN_EN_WRITE),
							       .OUT_READ(regs_mod__mod__read___req__data_$OUT_READ));

  // submodule regs_mod__mod__read___req__en_
  mkPulse regs_mod__mod__read___req__en_(.IN_EN_WRITE(regs_mod__mod__read___req__en_$IN_EN_WRITE),
					 .OUT_READ());

  // submodule regs_mod__mod__read___resp___1_data_
  mkWire #( /*width*/ 32'd32) regs_mod__mod__read___resp___1_data_(.IN_WRITE(regs_mod__mod__read___resp___1_data_$IN_WRITE),
								   .IN_EN_WRITE(regs_mod__mod__read___resp___1_data_$IN_EN_WRITE),
								   .OUT_READ(regs_mod__mod__read___resp___1_data_$OUT_READ));

  // submodule regs_mod__mod__read___resp___data_
  mkWire #( /*width*/ 32'd32) regs_mod__mod__read___resp___data_(.IN_WRITE(regs_mod__mod__read___resp___data_$IN_WRITE),
								 .IN_EN_WRITE(regs_mod__mod__read___resp___data_$IN_EN_WRITE),
								 .OUT_READ(regs_mod__mod__read___resp___data_$OUT_READ));

  // submodule regs_mod__mod__write___data_
  mkWire #( /*width*/ 32'd52) regs_mod__mod__write___data_(.IN_WRITE(regs_mod__mod__write___data_$IN_WRITE),
							   .IN_EN_WRITE(regs_mod__mod__write___data_$IN_EN_WRITE),
							   .OUT_READ(regs_mod__mod__write___data_$OUT_READ));

  // submodule regs_mod__mod__write___en_
  mkPulse regs_mod__mod__write___en_(.IN_EN_WRITE(regs_mod__mod__write___en_$IN_EN_WRITE),
				     .OUT_READ(regs_mod__mod__write___en_$OUT_READ));

  // submodule regs_mod__rf_mod__1_read___req__data_
  mkWire #( /*width*/ 32'd20) regs_mod__rf_mod__1_read___req__data_(.IN_WRITE(regs_mod__rf_mod__1_read___req__data_$IN_WRITE),
								    .IN_EN_WRITE(regs_mod__rf_mod__1_read___req__data_$IN_EN_WRITE),
								    .OUT_READ(regs_mod__rf_mod__1_read___req__data_$OUT_READ));

  // submodule regs_mod__rf_mod__1_read___req__en_
  mkPulse regs_mod__rf_mod__1_read___req__en_(.IN_EN_WRITE(regs_mod__rf_mod__1_read___req__en_$IN_EN_WRITE),
					      .OUT_READ());

  // submodule regs_mod__rf_mod__1_read___resp___data_
  mkWire #( /*width*/ 32'd32) regs_mod__rf_mod__1_read___resp___data_(.IN_WRITE(regs_mod__rf_mod__1_read___resp___data_$IN_WRITE),
								      .IN_EN_WRITE(regs_mod__rf_mod__1_read___resp___data_$IN_EN_WRITE),
								      .OUT_READ(regs_mod__rf_mod__1_read___resp___data_$OUT_READ));

  // submodule regs_mod__rf_mod__1_write___data_
  mkWire #( /*width*/ 32'd52) regs_mod__rf_mod__1_write___data_(.IN_WRITE(regs_mod__rf_mod__1_write___data_$IN_WRITE),
								.IN_EN_WRITE(regs_mod__rf_mod__1_write___data_$IN_EN_WRITE),
								.OUT_READ(regs_mod__rf_mod__1_write___data_$OUT_READ));

  // submodule regs_mod__rf_mod__1_write___en_
  mkPulse regs_mod__rf_mod__1_write___en_(.IN_EN_WRITE(regs_mod__rf_mod__1_write___en_$IN_EN_WRITE),
					  .OUT_READ(regs_mod__rf_mod__1_write___en_$OUT_READ));

  // submodule regs_mod__rf_mod__read___req__data_
  mkWire #( /*width*/ 32'd20) regs_mod__rf_mod__read___req__data_(.IN_WRITE(regs_mod__rf_mod__read___req__data_$IN_WRITE),
								  .IN_EN_WRITE(regs_mod__rf_mod__read___req__data_$IN_EN_WRITE),
								  .OUT_READ(regs_mod__rf_mod__read___req__data_$OUT_READ));

  // submodule regs_mod__rf_mod__read___req__en_
  mkPulse regs_mod__rf_mod__read___req__en_(.IN_EN_WRITE(regs_mod__rf_mod__read___req__en_$IN_EN_WRITE),
					    .OUT_READ());

  // submodule regs_mod__rf_mod__read___resp___data_
  mkWire #( /*width*/ 32'd32) regs_mod__rf_mod__read___resp___data_(.IN_WRITE(regs_mod__rf_mod__read___resp___data_$IN_WRITE),
								    .IN_EN_WRITE(regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE),
								    .OUT_READ(regs_mod__rf_mod__read___resp___data_$OUT_READ));

  // submodule regs_mod__rf_mod__write___data_
  mkWire #( /*width*/ 32'd52) regs_mod__rf_mod__write___data_(.IN_WRITE(regs_mod__rf_mod__write___data_$IN_WRITE),
							      .IN_EN_WRITE(regs_mod__rf_mod__write___data_$IN_EN_WRITE),
							      .OUT_READ(regs_mod__rf_mod__write___data_$OUT_READ));

  // submodule regs_mod__rf_mod__write___en_
  mkPulse regs_mod__rf_mod__write___en_(.IN_EN_WRITE(regs_mod__rf_mod__write___en_$IN_EN_WRITE),
					.OUT_READ(regs_mod__rf_mod__write___en_$OUT_READ));

  // submodule regs_mod__rf_rf
  mkRegFileLoad_ #( /*width*/ 32'd32,
		    /*n*/ 32'd20,
		    /*size*/ 32'd1048576,
		    /*file*/ "../memory.vmh",
		    /*mode*/ 32'd2) regs_mod__rf_rf(.CLK(CLK),
						    .RST_N(RST_N),
						    .READ_REQ_WRITE(regs_mod__rf_rf$READ_REQ_WRITE),
						    .WRITE_DATA_WRITE(regs_mod__rf_rf$WRITE_DATA_WRITE),
						    .WRITE_INDEX_WRITE(regs_mod__rf_rf$WRITE_INDEX_WRITE),
						    .WRITE_EN_WRITE(regs_mod__rf_rf$WRITE_EN_WRITE),
						    .READ_RESP_READ(regs_mod__rf_rf$READ_RESP_READ));

  // submodule regs_mod__rf_rf_1
  mkRegFileLoad_ #( /*width*/ 32'd32,
		    /*n*/ 32'd20,
		    /*size*/ 32'd1048576,
		    /*file*/ "../memory.vmh",
		    /*mode*/ 32'd2) regs_mod__rf_rf_1(.CLK(CLK),
						      .RST_N(RST_N),
						      .READ_REQ_WRITE(regs_mod__rf_rf_1$READ_REQ_WRITE),
						      .WRITE_DATA_WRITE(regs_mod__rf_rf_1$WRITE_DATA_WRITE),
						      .WRITE_INDEX_WRITE(regs_mod__rf_rf_1$WRITE_INDEX_WRITE),
						      .WRITE_EN_WRITE(regs_mod__rf_rf_1$WRITE_EN_WRITE),
						      .READ_RESP_READ(regs_mod__rf_rf_1$READ_RESP_READ));

  // submodule regs_mod__whichReg
  mkReg #( /*width*/ 32'd1) regs_mod__whichReg(.CLK(CLK),
					       .RST_N(RST_N),
					       .IN_EN_WRITE(regs_mod__whichReg$IN_EN_WRITE));

  // rule RL_r2
  assign WILL_FIRE_RL_r2 =
	     mod__dataReqQ__notEmpty___data_$OUT_READ &&
	     (mod__dataReqQ__first___data_$OUT_READ[64] ||
	      mod__dataQ__notFull___data_$OUT_READ) ;

  // submodule mod__dataQ__enq__data_
  assign mod__dataQ__enq__data_$IN_WRITE =
	     regs_mod__mod__read___resp___1_data_$OUT_READ ;
  assign mod__dataQ__enq__data_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 && !mod__dataReqQ__first___data_$OUT_READ[64] ;

  // submodule mod__dataQ__enq__en_
  assign mod__dataQ__enq__en_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 && !mod__dataReqQ__first___data_$OUT_READ[64] ;

  // submodule mod__dataQ__notFull___data_
  assign mod__dataQ__notFull___data_$IN_WRITE = dataQ_notFull_WRITE ;
  assign mod__dataQ__notFull___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__dataReqQ__deq__data_
  assign mod__dataReqQ__deq__data_$IN_EN_WRITE = WILL_FIRE_RL_r2 ;

  // submodule mod__dataReqQ__first___data_
  assign mod__dataReqQ__first___data_$IN_WRITE = dataReqQ_first_WRITE ;
  assign mod__dataReqQ__first___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__dataReqQ__notEmpty___data_
  assign mod__dataReqQ__notEmpty___data_$IN_WRITE = dataReqQ_notEmpty_WRITE ;
  assign mod__dataReqQ__notEmpty___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__instQ__enq__data_
  assign mod__instQ__enq__data_$IN_WRITE =
	     regs_mod__mod__read___resp___data_$OUT_READ ;
  assign mod__instQ__enq__data_$IN_EN_WRITE =
	     mod__instReqQ__notEmpty___data_$OUT_READ &&
	     mod__instQ__notFull___data_$OUT_READ ;

  // submodule mod__instQ__enq__en_
  assign mod__instQ__enq__en_$IN_EN_WRITE =
	     mod__instReqQ__notEmpty___data_$OUT_READ &&
	     mod__instQ__notFull___data_$OUT_READ ;

  // submodule mod__instQ__notFull___data_
  assign mod__instQ__notFull___data_$IN_WRITE = instQ_notFull_WRITE ;
  assign mod__instQ__notFull___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__instReqQ__deq__data_
  assign mod__instReqQ__deq__data_$IN_EN_WRITE =
	     mod__instReqQ__notEmpty___data_$OUT_READ &&
	     mod__instQ__notFull___data_$OUT_READ ;

  // submodule mod__instReqQ__first___data_
  assign mod__instReqQ__first___data_$IN_WRITE = instReqQ_first_WRITE ;
  assign mod__instReqQ__first___data_$IN_EN_WRITE = 1'd1 ;

  // submodule mod__instReqQ__notEmpty___data_
  assign mod__instReqQ__notEmpty___data_$IN_WRITE = instReqQ_notEmpty_WRITE ;
  assign mod__instReqQ__notEmpty___data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__mod__read___req__1_data_
  assign regs_mod__mod__read___req__1_data_$IN_WRITE =
	     mod__dataReqQ__first___data_$OUT_READ[21:2] ;
  assign regs_mod__mod__read___req__1_data_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 && !mod__dataReqQ__first___data_$OUT_READ[64] ;

  // submodule regs_mod__mod__read___req__1_en_
  assign regs_mod__mod__read___req__1_en_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 && !mod__dataReqQ__first___data_$OUT_READ[64] ;

  // submodule regs_mod__mod__read___req__data_
  assign regs_mod__mod__read___req__data_$IN_WRITE =
	     mod__instReqQ__first___data_$OUT_READ[21:2] ;
  assign regs_mod__mod__read___req__data_$IN_EN_WRITE =
	     mod__instReqQ__notEmpty___data_$OUT_READ &&
	     mod__instQ__notFull___data_$OUT_READ ;

  // submodule regs_mod__mod__read___req__en_
  assign regs_mod__mod__read___req__en_$IN_EN_WRITE =
	     mod__instReqQ__notEmpty___data_$OUT_READ &&
	     mod__instQ__notFull___data_$OUT_READ ;

  // submodule regs_mod__mod__read___resp___1_data_
  assign regs_mod__mod__read___resp___1_data_$IN_WRITE =
	     regs_mod__rf_mod__1_read___resp___data_$OUT_READ ;
  assign regs_mod__mod__read___resp___1_data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__mod__read___resp___data_
  assign regs_mod__mod__read___resp___data_$IN_WRITE =
	     regs_mod__rf_mod__read___resp___data_$OUT_READ ;
  assign regs_mod__mod__read___resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__mod__write___data_
  assign regs_mod__mod__write___data_$IN_WRITE =
	     { mod__dataReqQ__first___data_$OUT_READ[53:34],
	       mod__dataReqQ__first___data_$OUT_READ[31:0] } ;
  assign regs_mod__mod__write___data_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 && mod__dataReqQ__first___data_$OUT_READ[64] ;

  // submodule regs_mod__mod__write___en_
  assign regs_mod__mod__write___en_$IN_EN_WRITE =
	     WILL_FIRE_RL_r2 && mod__dataReqQ__first___data_$OUT_READ[64] ;

  // submodule regs_mod__rf_mod__1_read___req__data_
  assign regs_mod__rf_mod__1_read___req__data_$IN_WRITE =
	     regs_mod__mod__read___req__1_data_$OUT_READ ;
  assign regs_mod__rf_mod__1_read___req__data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__1_read___req__en_
  assign regs_mod__rf_mod__1_read___req__en_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__1_read___resp___data_
  assign regs_mod__rf_mod__1_read___resp___data_$IN_WRITE =
	     regs_mod__rf_rf_1$READ_RESP_READ ;
  assign regs_mod__rf_mod__1_read___resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__1_write___data_
  assign regs_mod__rf_mod__1_write___data_$IN_WRITE =
	     regs_mod__mod__write___data_$OUT_READ ;
  assign regs_mod__rf_mod__1_write___data_$IN_EN_WRITE =
	     regs_mod__mod__write___en_$OUT_READ ;

  // submodule regs_mod__rf_mod__1_write___en_
  assign regs_mod__rf_mod__1_write___en_$IN_EN_WRITE =
	     regs_mod__mod__write___en_$OUT_READ ;

  // submodule regs_mod__rf_mod__read___req__data_
  assign regs_mod__rf_mod__read___req__data_$IN_WRITE =
	     regs_mod__mod__read___req__data_$OUT_READ ;
  assign regs_mod__rf_mod__read___req__data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__read___req__en_
  assign regs_mod__rf_mod__read___req__en_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__read___resp___data_
  assign regs_mod__rf_mod__read___resp___data_$IN_WRITE =
	     regs_mod__rf_rf$READ_RESP_READ ;
  assign regs_mod__rf_mod__read___resp___data_$IN_EN_WRITE = 1'd1 ;

  // submodule regs_mod__rf_mod__write___data_
  assign regs_mod__rf_mod__write___data_$IN_WRITE =
	     regs_mod__mod__write___data_$OUT_READ ;
  assign regs_mod__rf_mod__write___data_$IN_EN_WRITE =
	     regs_mod__mod__write___en_$OUT_READ ;

  // submodule regs_mod__rf_mod__write___en_
  assign regs_mod__rf_mod__write___en_$IN_EN_WRITE =
	     regs_mod__mod__write___en_$OUT_READ ;

  // submodule regs_mod__rf_rf
  assign regs_mod__rf_rf$READ_REQ_WRITE =
	     regs_mod__rf_mod__read___req__data_$OUT_READ ;
  assign regs_mod__rf_rf$WRITE_DATA_WRITE =
	     regs_mod__rf_mod__write___data_$OUT_READ[31:0] ;
  assign regs_mod__rf_rf$WRITE_INDEX_WRITE =
	     regs_mod__rf_mod__write___data_$OUT_READ[51:32] ;
  assign regs_mod__rf_rf$WRITE_EN_WRITE =
	     regs_mod__rf_mod__write___en_$OUT_READ ;

  // submodule regs_mod__rf_rf_1
  assign regs_mod__rf_rf_1$READ_REQ_WRITE =
	     regs_mod__rf_mod__1_read___req__data_$OUT_READ ;
  assign regs_mod__rf_rf_1$WRITE_DATA_WRITE =
	     regs_mod__rf_mod__1_write___data_$OUT_READ[31:0] ;
  assign regs_mod__rf_rf_1$WRITE_INDEX_WRITE =
	     regs_mod__rf_mod__1_write___data_$OUT_READ[51:32] ;
  assign regs_mod__rf_rf_1$WRITE_EN_WRITE =
	     regs_mod__rf_mod__1_write___en_$OUT_READ ;

  // submodule regs_mod__whichReg
  assign regs_mod__whichReg$IN_EN_WRITE = 1'd1 ;
endmodule  // mkMemory

